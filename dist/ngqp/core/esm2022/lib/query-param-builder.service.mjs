import { Injectable } from '@angular/core';
import { DEFAULT_BOOLEAN_DESERIALIZER, DEFAULT_BOOLEAN_SERIALIZER, DEFAULT_NUMBER_DESERIALIZER, DEFAULT_NUMBER_SERIALIZER, DEFAULT_STRING_DESERIALIZER, DEFAULT_STRING_SERIALIZER } from './serializers';
import { LOOSE_IDENTITY_COMPARATOR } from './util';
import { MultiQueryParam, QueryParam, PartitionedQueryParam } from './model/query-param';
import { QueryParamGroup } from './model/query-param-group';
import * as i0 from "@angular/core";
function isMultiOpts(opts) {
    return opts.multi === true;
}
/**
 * Service to create parameters and groups.
 *
 * This service provides a simple API to create {@link QueryParamGroup} and {@link QueryParam}
 * instances and is the recommended way to set them up.
 */
export class QueryParamBuilder {
    /**
     * Creates a new {@link QueryParamGroup}.
     *
     * This is the primary method to create a new group of parameters. Pass a list of
     * {@link QueryParam} instances by using the `xxxParam` methods.
     *
     * @param queryParams List of {@link QueryParam}s keyed by a unique name.
     * @param extras Additional parameters for this group, overriding global configuration.
     * @returns The new {@link QueryParamGroup}.
     */
    group(queryParams, extras = {}) {
        // TODO Maybe we should first validate that no two queryParams defined the same "param".
        return new QueryParamGroup(queryParams, extras);
    }
    /**
     * Partition a query parameter into multiple others.
     *
     * Partitioning is useful if you need to bind a single form control to multiple query parameters.
     * For example, consider a {@code <select>} which represents both a field to sort by and the
     * direction to sort in. If you want to encode these two information on separate URL parameters,
     * you can define a single query parameter that is partitioned into two others.
     *
     * @param queryParams The query parameters making up this partition.
     * @param opts See {@link PartitionedQueryParamOpts}.
     */
    partition(queryParams, opts) {
        return new PartitionedQueryParam(queryParams, opts);
    }
    /**
     * Create a new parameter of type `string`.
     *
     * See {@link QueryParamOpts}.
     */
    stringParam(urlParam, opts = {}) {
        opts = {
            serialize: DEFAULT_STRING_SERIALIZER,
            deserialize: DEFAULT_STRING_DESERIALIZER,
            compareWith: LOOSE_IDENTITY_COMPARATOR,
            ...opts,
        };
        if (isMultiOpts(opts)) {
            return new MultiQueryParam(urlParam, opts);
        }
        else {
            return new QueryParam(urlParam, opts);
        }
    }
    /**
     * Create a new parameter of type `number`.
     *
     * See {@link QueryParamOpts}.
     */
    numberParam(urlParam, opts = {}) {
        opts = {
            serialize: DEFAULT_NUMBER_SERIALIZER,
            deserialize: DEFAULT_NUMBER_DESERIALIZER,
            compareWith: LOOSE_IDENTITY_COMPARATOR,
            ...opts,
        };
        if (isMultiOpts(opts)) {
            return new MultiQueryParam(urlParam, opts);
        }
        else {
            return new QueryParam(urlParam, opts);
        }
    }
    /**
     * Create a new parameter of type `boolean`.
     *
     * See {@link QueryParamOpts}.
     */
    booleanParam(urlParam, opts = {}) {
        opts = {
            serialize: DEFAULT_BOOLEAN_SERIALIZER,
            deserialize: DEFAULT_BOOLEAN_DESERIALIZER,
            compareWith: LOOSE_IDENTITY_COMPARATOR,
            ...opts,
        };
        if (isMultiOpts(opts)) {
            return new MultiQueryParam(urlParam, opts);
        }
        else {
            return new QueryParam(urlParam, opts);
        }
    }
    /**
     * Create a new parameter for a complex type.
     *
     * See {@link QueryParamOpts}.
     */
    param(urlParam, opts = {}) {
        opts = {
            compareWith: LOOSE_IDENTITY_COMPARATOR,
            ...opts,
        };
        if (isMultiOpts(opts)) {
            return new MultiQueryParam(urlParam, opts);
        }
        else {
            return new QueryParam(urlParam, opts);
        }
    }
    static ɵfac = function QueryParamBuilder_Factory(t) { return new (t || QueryParamBuilder)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: QueryParamBuilder, factory: QueryParamBuilder.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(QueryParamBuilder, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,