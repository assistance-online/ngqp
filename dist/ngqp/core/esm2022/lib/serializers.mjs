import { isMissing } from './util';
/**
 * Creates a serializer for parameters of type `string`.
 *
 * @param defaultValue Optional default value to return if the value to serialize is `undefined` or `null`.
 */
export function createStringSerializer(defaultValue = null) {
    return model => isMissing(model) ? defaultValue : model;
}
/**
 * Creates a deserializer for parameters of type `string`.
 *
 * @param defaultValue Optional default value to return if the value to deserialize is `undefined` or `null`.
 */
export function createStringDeserializer(defaultValue = null) {
    return value => isMissing(value) ? defaultValue : value;
}
/**
 * Creates a serializer for parameters of type `number`.
 *
 * @param defaultValue Optional default value to return if the value to serialize is `undefined` or `null`.
 */
export function createNumberSerializer(defaultValue = null) {
    return model => isMissing(model) ? defaultValue : `${model}`;
}
/**
 * Creates a deserializer for parameters of type `number`.
 *
 * @param defaultValue Optional default value to return if the value to deserialize is `undefined` or `null`.
 */
export function createNumberDeserializer(defaultValue = null) {
    return value => isMissing(value) ? defaultValue : parseFloat(value);
}
/**
 * Creates a serializer for parameters of type `boolean`.
 *
 * @param defaultValue Optional default value to return if the value to serialize is `undefined` or `null`.
 */
export function createBooleanSerializer(defaultValue = null) {
    return model => isMissing(model) ? defaultValue : `${model}`;
}
/**
 * Creates a deserializer for parameters of type `boolean`.
 *
 * @param defaultValue Optional default value to return if the value to deserialize is `undefined` or `null`.
 */
export function createBooleanDeserializer(defaultValue = null) {
    return value => isMissing(value) ? defaultValue : (value === 'true' || value === '1');
}
/** @internal */
export const DEFAULT_STRING_SERIALIZER = createStringSerializer();
/** @internal */
export const DEFAULT_STRING_DESERIALIZER = createStringDeserializer();
/** @internal */
export const DEFAULT_NUMBER_SERIALIZER = createNumberSerializer();
/** @internal */
export const DEFAULT_NUMBER_DESERIALIZER = createNumberDeserializer();
/** @internal */
export const DEFAULT_BOOLEAN_SERIALIZER = createBooleanSerializer();
/** @internal */
export const DEFAULT_BOOLEAN_DESERIALIZER = createBooleanDeserializer();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3FwL2NvcmUvc3JjL2xpYi9zZXJpYWxpemVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdsRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLHNCQUFzQixDQUFDLGVBQThCLElBQUk7SUFDckUsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDNUQsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsZUFBOEIsSUFBSTtJQUN2RSxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM1RCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxlQUE4QixJQUFJO0lBQ3JFLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQztBQUNqRSxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxlQUE4QixJQUFJO0lBQ3ZFLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hFLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLHVCQUF1QixDQUFDLGVBQThCLElBQUk7SUFDdEUsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDO0FBQ2pFLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLHlCQUF5QixDQUFDLGVBQStCLElBQUk7SUFDekUsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxNQUFNLElBQUksS0FBSyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQzFGLENBQUM7QUFFRCxnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsc0JBQXNCLEVBQUUsQ0FBQztBQUVsRSxnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsd0JBQXdCLEVBQUUsQ0FBQztBQUV0RSxnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsc0JBQXNCLEVBQUUsQ0FBQztBQUVsRSxnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsd0JBQXdCLEVBQUUsQ0FBQztBQUV0RSxnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsdUJBQXVCLEVBQUUsQ0FBQztBQUVwRSxnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcseUJBQXlCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFyZUVxdWFsVXNpbmcsIGlzTWlzc2luZyB9IGZyb20gJy4vdXRpbCc7XHJcbmltcG9ydCB7IENvbXBhcmF0b3IsIFBhcmFtRGVzZXJpYWxpemVyLCBQYXJhbVNlcmlhbGl6ZXIgfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgc2VyaWFsaXplciBmb3IgcGFyYW1ldGVycyBvZiB0eXBlIGBzdHJpbmdgLlxyXG4gKlxyXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIE9wdGlvbmFsIGRlZmF1bHQgdmFsdWUgdG8gcmV0dXJuIGlmIHRoZSB2YWx1ZSB0byBzZXJpYWxpemUgaXMgYHVuZGVmaW5lZGAgb3IgYG51bGxgLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0cmluZ1NlcmlhbGl6ZXIoZGVmYXVsdFZhbHVlOiBzdHJpbmcgfCBudWxsID0gbnVsbCk6IFBhcmFtU2VyaWFsaXplcjxzdHJpbmcgfCBudWxsPiB7XHJcbiAgICByZXR1cm4gbW9kZWwgPT4gaXNNaXNzaW5nKG1vZGVsKSA/IGRlZmF1bHRWYWx1ZSA6IG1vZGVsO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIGRlc2VyaWFsaXplciBmb3IgcGFyYW1ldGVycyBvZiB0eXBlIGBzdHJpbmdgLlxyXG4gKlxyXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIE9wdGlvbmFsIGRlZmF1bHQgdmFsdWUgdG8gcmV0dXJuIGlmIHRoZSB2YWx1ZSB0byBkZXNlcmlhbGl6ZSBpcyBgdW5kZWZpbmVkYCBvciBgbnVsbGAuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RyaW5nRGVzZXJpYWxpemVyKGRlZmF1bHRWYWx1ZTogc3RyaW5nIHwgbnVsbCA9IG51bGwpOiBQYXJhbURlc2VyaWFsaXplcjxzdHJpbmcgfCBudWxsPiB7XHJcbiAgICByZXR1cm4gdmFsdWUgPT4gaXNNaXNzaW5nKHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIHNlcmlhbGl6ZXIgZm9yIHBhcmFtZXRlcnMgb2YgdHlwZSBgbnVtYmVyYC5cclxuICpcclxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBPcHRpb25hbCBkZWZhdWx0IHZhbHVlIHRvIHJldHVybiBpZiB0aGUgdmFsdWUgdG8gc2VyaWFsaXplIGlzIGB1bmRlZmluZWRgIG9yIGBudWxsYC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOdW1iZXJTZXJpYWxpemVyKGRlZmF1bHRWYWx1ZTogc3RyaW5nIHwgbnVsbCA9IG51bGwpOiBQYXJhbVNlcmlhbGl6ZXI8bnVtYmVyIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIG1vZGVsID0+IGlzTWlzc2luZyhtb2RlbCkgPyBkZWZhdWx0VmFsdWUgOiBgJHttb2RlbH1gO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIGRlc2VyaWFsaXplciBmb3IgcGFyYW1ldGVycyBvZiB0eXBlIGBudW1iZXJgLlxyXG4gKlxyXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIE9wdGlvbmFsIGRlZmF1bHQgdmFsdWUgdG8gcmV0dXJuIGlmIHRoZSB2YWx1ZSB0byBkZXNlcmlhbGl6ZSBpcyBgdW5kZWZpbmVkYCBvciBgbnVsbGAuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTnVtYmVyRGVzZXJpYWxpemVyKGRlZmF1bHRWYWx1ZTogbnVtYmVyIHwgbnVsbCA9IG51bGwpOiBQYXJhbURlc2VyaWFsaXplcjxudW1iZXIgfCBudWxsPiB7XHJcbiAgICByZXR1cm4gdmFsdWUgPT4gaXNNaXNzaW5nKHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHBhcnNlRmxvYXQodmFsdWUpO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIHNlcmlhbGl6ZXIgZm9yIHBhcmFtZXRlcnMgb2YgdHlwZSBgYm9vbGVhbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgT3B0aW9uYWwgZGVmYXVsdCB2YWx1ZSB0byByZXR1cm4gaWYgdGhlIHZhbHVlIHRvIHNlcmlhbGl6ZSBpcyBgdW5kZWZpbmVkYCBvciBgbnVsbGAuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQm9vbGVhblNlcmlhbGl6ZXIoZGVmYXVsdFZhbHVlOiBzdHJpbmcgfCBudWxsID0gbnVsbCk6IFBhcmFtU2VyaWFsaXplcjxib29sZWFuIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIG1vZGVsID0+IGlzTWlzc2luZyhtb2RlbCkgPyBkZWZhdWx0VmFsdWUgOiBgJHttb2RlbH1gO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIGRlc2VyaWFsaXplciBmb3IgcGFyYW1ldGVycyBvZiB0eXBlIGBib29sZWFuYC5cclxuICpcclxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBPcHRpb25hbCBkZWZhdWx0IHZhbHVlIHRvIHJldHVybiBpZiB0aGUgdmFsdWUgdG8gZGVzZXJpYWxpemUgaXMgYHVuZGVmaW5lZGAgb3IgYG51bGxgLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJvb2xlYW5EZXNlcmlhbGl6ZXIoZGVmYXVsdFZhbHVlOiBib29sZWFuIHwgbnVsbCA9IG51bGwpOiBQYXJhbURlc2VyaWFsaXplcjxib29sZWFuIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIHZhbHVlID0+IGlzTWlzc2luZyh2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiAodmFsdWUgPT09ICd0cnVlJyB8fCB2YWx1ZSA9PT0gJzEnKTtcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TVFJJTkdfU0VSSUFMSVpFUiA9IGNyZWF0ZVN0cmluZ1NlcmlhbGl6ZXIoKTtcclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU1RSSU5HX0RFU0VSSUFMSVpFUiA9IGNyZWF0ZVN0cmluZ0Rlc2VyaWFsaXplcigpO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9OVU1CRVJfU0VSSUFMSVpFUiA9IGNyZWF0ZU51bWJlclNlcmlhbGl6ZXIoKTtcclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfTlVNQkVSX0RFU0VSSUFMSVpFUiA9IGNyZWF0ZU51bWJlckRlc2VyaWFsaXplcigpO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9CT09MRUFOX1NFUklBTElaRVIgPSBjcmVhdGVCb29sZWFuU2VyaWFsaXplcigpO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9CT09MRUFOX0RFU0VSSUFMSVpFUiA9IGNyZWF0ZUJvb2xlYW5EZXNlcmlhbGl6ZXIoKTsiXX0=