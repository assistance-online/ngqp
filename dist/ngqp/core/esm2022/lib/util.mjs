import { convertToParamMap } from '@angular/router';
import { isObservable, of } from 'rxjs';
/** @internal */
// tslint:disable-next-line:triple-equals
export const LOOSE_IDENTITY_COMPARATOR = (a, b) => a == b;
/** @internal */
export const NOP = () => { };
/** @internal */
export function isMissing(obj) {
    return obj === undefined || obj === null;
}
/** @internal */
export function undefinedToNull(obj) {
    if (obj === undefined) {
        return null;
    }
    return obj;
}
/** @internal */
export function isPresent(obj) {
    return !isMissing(obj);
}
/** @internal */
export function isFunction(obj) {
    return isPresent(obj) && typeof obj === 'function';
}
/** @internal */
export function wrapTryCatch(fn, msg) {
    return function () {
        try {
            return fn.apply(this, arguments);
        }
        catch (err) {
            console.error(msg, err);
            return null;
        }
    };
}
/** @internal */
export function areEqualUsing(first, second, comparator) {
    const comparison = comparator(first, second);
    if (typeof comparison === 'boolean') {
        return comparison;
    }
    return comparison === 0;
}
/** @internal */
export function filterParamMap(paramMap, keys) {
    const params = {};
    keys
        .filter(key => paramMap.keys.includes(key))
        .forEach(key => params[key] = paramMap.getAll(key));
    return convertToParamMap(params);
}
/** @internal */
export function compareParamMaps(first, second) {
    if ((first && !second) || (second && !first)) {
        return false;
    }
    if (!compareStringArraysUnordered(first.keys, second.keys)) {
        return false;
    }
    return first.keys.every(key => compareStringArraysUnordered(first.getAll(key), second.getAll(key)));
}
/** @internal */
export function compareStringArraysUnordered(first, second) {
    if (!first && !second) {
        return true;
    }
    if ((first && !second) || (second && !first)) {
        return false;
    }
    if (first.length !== second.length) {
        return false;
    }
    const sortedFirst = first.sort();
    const sortedSecond = second.sort();
    return sortedFirst.every((firstKey, index) => firstKey === sortedSecond[index]);
}
/** @internal */
export function wrapIntoObservable(input) {
    if (isObservable(input)) {
        return input;
    }
    return of(input);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25ncXAvY29yZS9zcmMvbGliL3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFvQixNQUFNLGlCQUFpQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxZQUFZLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3BELGdCQUFnQjtBQUNoQix5Q0FBeUM7QUFDekMsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsQ0FBSSxDQUFJLEVBQUUsQ0FBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRW5FLGdCQUFnQjtBQUNoQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQWEsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO0FBRXRDLGdCQUFnQjtBQUNoQixNQUFNLFVBQVUsU0FBUyxDQUFDLEdBQVE7SUFDOUIsT0FBTyxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxJQUFJLENBQUM7QUFDN0MsQ0FBQztBQUVELGdCQUFnQjtBQUNoQixNQUFNLFVBQVUsZUFBZSxDQUFJLEdBQWtCO0lBQ2pELElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtRQUNuQixPQUFPLElBQUksQ0FBQztLQUNmO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDO0FBRUQsZ0JBQWdCO0FBQ2hCLE1BQU0sVUFBVSxTQUFTLENBQUksR0FBTTtJQUMvQixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFFRCxnQkFBZ0I7QUFDaEIsTUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFRO0lBQy9CLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE9BQU8sR0FBRyxLQUFLLFVBQVUsQ0FBQztBQUN2RCxDQUFDO0FBRUQsZ0JBQWdCO0FBQ2hCLE1BQU0sVUFBVSxZQUFZLENBQXFCLEVB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TyxLQUFLLENBQUM7S0FDaEI7SUFFRCxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydFRvUGFyYW1NYXAsIFBhcmFtTWFwLCBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBpc09ic2VydmFibGUsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENvbXBhcmF0b3IgfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcclxuZXhwb3J0IGNvbnN0IExPT1NFX0lERU5USVRZX0NPTVBBUkFUT1IgPSA8VD4oYTogVCwgYjogVCkgPT4gYSA9PSBiO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgY29uc3QgTk9QOiBGdW5jdGlvbiA9ICgpID0+IHt9O1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNNaXNzaW5nKG9iajogYW55KTogb2JqIGlzIG51bGwgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbDtcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdW5kZWZpbmVkVG9OdWxsPFQ+KG9iajogVCB8IHVuZGVmaW5lZCk6IFQgfCBudWxsIHtcclxuICAgIGlmIChvYmogPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJlc2VudDxUPihvYmo6IFQpOiBvYmogaXMgRXhjbHVkZTxULCBudWxsIHwgdW5kZWZpbmVkPiB7XHJcbiAgICByZXR1cm4gIWlzTWlzc2luZyhvYmopO1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKG9iajogYW55KTogb2JqIGlzIEZ1bmN0aW9uIHtcclxuICAgIHJldHVybiBpc1ByZXNlbnQob2JqKSAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBmdW5jdGlvbiB3cmFwVHJ5Q2F0Y2g8VCBleHRlbmRzIEZ1bmN0aW9uPihmbjogVCwgbXNnOiBzdHJpbmcpOiBUIHtcclxuICAgIHJldHVybiA8YW55PmZ1bmN0aW9uICh0aGlzOiBhbnkpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihtc2csIGVycik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFyZUVxdWFsVXNpbmc8VD4oZmlyc3Q6IFQgfCBudWxsLCBzZWNvbmQ6IFQgfCBudWxsLCBjb21wYXJhdG9yOiBDb21wYXJhdG9yPFQgfCBudWxsPik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgY29tcGFyaXNvbiA9IGNvbXBhcmF0b3IoZmlyc3QsIHNlY29uZCk7XHJcbiAgICBpZiAodHlwZW9mIGNvbXBhcmlzb24gPT09ICdib29sZWFuJykge1xyXG4gICAgICAgIHJldHVybiBjb21wYXJpc29uO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb21wYXJpc29uID09PSAwO1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJQYXJhbU1hcChwYXJhbU1hcDogUGFyYW1NYXAsIGtleXM6IHN0cmluZ1tdKTogUGFyYW1NYXAge1xyXG4gICAgY29uc3QgcGFyYW1zOiBQYXJhbXMgPSB7fTtcclxuICAgIGtleXNcclxuICAgICAgICAuZmlsdGVyKGtleSA9PiBwYXJhbU1hcC5rZXlzLmluY2x1ZGVzKGtleSkpXHJcbiAgICAgICAgLmZvckVhY2goa2V5ID0+IHBhcmFtc1sga2V5IF0gPSBwYXJhbU1hcC5nZXRBbGwoa2V5KSk7XHJcblxyXG4gICAgcmV0dXJuIGNvbnZlcnRUb1BhcmFtTWFwKHBhcmFtcyk7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVQYXJhbU1hcHMoZmlyc3Q6IFBhcmFtTWFwLCBzZWNvbmQ6IFBhcmFtTWFwKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoKGZpcnN0ICYmICFzZWNvbmQpIHx8IChzZWNvbmQgJiYgIWZpcnN0KSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWNvbXBhcmVTdHJpbmdBcnJheXNVbm9yZGVyZWQoZmlyc3Qua2V5cywgc2Vjb25kLmtleXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmaXJzdC5rZXlzLmV2ZXJ5KGtleSA9PlxyXG4gICAgICAgIGNvbXBhcmVTdHJpbmdBcnJheXNVbm9yZGVyZWQoZmlyc3QuZ2V0QWxsKGtleSksIHNlY29uZC5nZXRBbGwoa2V5KSlcclxuICAgICk7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVTdHJpbmdBcnJheXNVbm9yZGVyZWQoZmlyc3Q6IHN0cmluZ1tdLCBzZWNvbmQ6IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIWZpcnN0ICYmICFzZWNvbmQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoKGZpcnN0ICYmICFzZWNvbmQpIHx8IChzZWNvbmQgJiYgIWZpcnN0KSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZmlyc3QubGVuZ3RoICE9PSBzZWNvbmQubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNvcnRlZEZpcnN0ID0gZmlyc3Quc29ydCgpO1xyXG4gICAgY29uc3Qgc29ydGVkU2Vjb25kID0gc2Vjb25kLnNvcnQoKTtcclxuICAgIHJldHVybiBzb3J0ZWRGaXJzdC5ldmVyeSgoZmlyc3RLZXksIGluZGV4KSA9PiBmaXJzdEtleSA9PT0gc29ydGVkU2Vjb25kW2luZGV4XSk7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBJbnRvT2JzZXJ2YWJsZTxUPihpbnB1dDogVCB8IE9ic2VydmFibGU8VD4pOiBPYnNlcnZhYmxlPFQ+IHtcclxuICAgIGlmIChpc09ic2VydmFibGUoaW5wdXQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvZihpbnB1dCk7XHJcbn0iXX0=