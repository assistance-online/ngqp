{"version":3,"file":"ngqp-core.mjs","sources":["../../../../projects/ngqp/core/src/lib/util.ts","../../../../projects/ngqp/core/src/lib/serializers.ts","../../../../projects/ngqp/core/src/lib/model/query-param.ts","../../../../projects/ngqp/core/src/lib/model/query-param-group.ts","../../../../projects/ngqp/core/src/lib/query-param-builder.service.ts","../../../../projects/ngqp/core/src/lib/router-adapter/router-adapter.interface.ts","../../../../projects/ngqp/core/src/lib/directives/query-param-group.service.ts","../../../../projects/ngqp/core/src/lib/accessors/default-control-value-accessor.directive.ts","../../../../projects/ngqp/core/src/lib/accessors/range-control-value-accessor.directive.ts","../../../../projects/ngqp/core/src/lib/accessors/number-control-value-accessor.directive.ts","../../../../projects/ngqp/core/src/lib/accessors/checkbox-control-value-accessor.directive.ts","../../../../projects/ngqp/core/src/lib/accessors/select-control-value-accessor.directive.ts","../../../../projects/ngqp/core/src/lib/accessors/multi-select-control-value-accessor.directive.ts","../../../../projects/ngqp/core/src/lib/accessors/ngqp-accessors.ts","../../../../projects/ngqp/core/src/lib/accessors/util.ts","../../../../projects/ngqp/core/src/lib/directives/query-param.directive.ts","../../../../projects/ngqp/core/src/lib/directives/query-param-name.directive.ts","../../../../projects/ngqp/core/src/lib/directives/query-param-group.directive.ts","../../../../projects/ngqp/core/src/lib/directives/control-value-accessor.directive.ts","../../../../projects/ngqp/core/src/lib/accessors/select-option.directive.ts","../../../../projects/ngqp/core/src/lib/accessors/multi-select-option.directive.ts","../../../../projects/ngqp/core/src/lib/router-adapter/default-router-adapter.service.ts","../../../../projects/ngqp/core/src/lib/query-param.module.ts","../../../../projects/ngqp/core/src/ngqp-core.ts"],"sourcesContent":["import { convertToParamMap, ParamMap, Params } from '@angular/router';\r\nimport { isObservable, Observable, of } from 'rxjs';\r\nimport { Comparator } from './types';\r\n\r\n/** @internal */\r\n// tslint:disable-next-line:triple-equals\r\nexport const LOOSE_IDENTITY_COMPARATOR = <T>(a: T, b: T) => a == b;\r\n\r\n/** @internal */\r\nexport const NOP: Function = () => {};\r\n\r\n/** @internal */\r\nexport function isMissing(obj: any): obj is null | undefined {\r\n    return obj === undefined || obj === null;\r\n}\r\n\r\n/** @internal */\r\nexport function undefinedToNull<T>(obj: T | undefined): T | null {\r\n    if (obj === undefined) {\r\n        return null;\r\n    }\r\n\r\n    return obj;\r\n}\r\n\r\n/** @internal */\r\nexport function isPresent<T>(obj: T): obj is Exclude<T, null | undefined> {\r\n    return !isMissing(obj);\r\n}\r\n\r\n/** @internal */\r\nexport function isFunction(obj: any): obj is Function {\r\n    return isPresent(obj) && typeof obj === 'function';\r\n}\r\n\r\n/** @internal */\r\nexport function wrapTryCatch<T extends Function>(fn: T, msg: string): T {\r\n    return <any>function (this: any) {\r\n        try {\r\n            return fn.apply(this, arguments);\r\n        } catch (err) {\r\n            console.error(msg, err);\r\n            return null;\r\n        }\r\n    };\r\n}\r\n\r\n/** @internal */\r\nexport function areEqualUsing<T>(first: T | null, second: T | null, comparator: Comparator<T | null>): boolean {\r\n    const comparison = comparator(first, second);\r\n    if (typeof comparison === 'boolean') {\r\n        return comparison;\r\n    }\r\n\r\n    return comparison === 0;\r\n}\r\n\r\n/** @internal */\r\nexport function filterParamMap(paramMap: ParamMap, keys: string[]): ParamMap {\r\n    const params: Params = {};\r\n    keys\r\n        .filter(key => paramMap.keys.includes(key))\r\n        .forEach(key => params[ key ] = paramMap.getAll(key));\r\n\r\n    return convertToParamMap(params);\r\n}\r\n\r\n/** @internal */\r\nexport function compareParamMaps(first: ParamMap, second: ParamMap): boolean {\r\n    if ((first && !second) || (second && !first)) {\r\n        return false;\r\n    }\r\n\r\n    if (!compareStringArraysUnordered(first.keys, second.keys)) {\r\n        return false;\r\n    }\r\n\r\n    return first.keys.every(key =>\r\n        compareStringArraysUnordered(first.getAll(key), second.getAll(key))\r\n    );\r\n}\r\n\r\n/** @internal */\r\nexport function compareStringArraysUnordered(first: string[], second: string[]): boolean {\r\n    if (!first && !second) {\r\n        return true;\r\n    }\r\n\r\n    if ((first && !second) || (second && !first)) {\r\n        return false;\r\n    }\r\n\r\n    if (first.length !== second.length) {\r\n        return false;\r\n    }\r\n\r\n    const sortedFirst = first.sort();\r\n    const sortedSecond = second.sort();\r\n    return sortedFirst.every((firstKey, index) => firstKey === sortedSecond[index]);\r\n}\r\n\r\n/** @internal */\r\nexport function wrapIntoObservable<T>(input: T | Observable<T>): Observable<T> {\r\n    if (isObservable(input)) {\r\n        return input;\r\n    }\r\n\r\n    return of(input);\r\n}","import { areEqualUsing, isMissing } from './util';\r\nimport { Comparator, ParamDeserializer, ParamSerializer } from './types';\r\n\r\n/**\r\n * Creates a serializer for parameters of type `string`.\r\n *\r\n * @param defaultValue Optional default value to return if the value to serialize is `undefined` or `null`.\r\n */\r\nexport function createStringSerializer(defaultValue: string | null = null): ParamSerializer<string | null> {\r\n    return model => isMissing(model) ? defaultValue : model;\r\n}\r\n\r\n/**\r\n * Creates a deserializer for parameters of type `string`.\r\n *\r\n * @param defaultValue Optional default value to return if the value to deserialize is `undefined` or `null`.\r\n */\r\nexport function createStringDeserializer(defaultValue: string | null = null): ParamDeserializer<string | null> {\r\n    return value => isMissing(value) ? defaultValue : value;\r\n}\r\n\r\n/**\r\n * Creates a serializer for parameters of type `number`.\r\n *\r\n * @param defaultValue Optional default value to return if the value to serialize is `undefined` or `null`.\r\n */\r\nexport function createNumberSerializer(defaultValue: string | null = null): ParamSerializer<number | null> {\r\n    return model => isMissing(model) ? defaultValue : `${model}`;\r\n}\r\n\r\n/**\r\n * Creates a deserializer for parameters of type `number`.\r\n *\r\n * @param defaultValue Optional default value to return if the value to deserialize is `undefined` or `null`.\r\n */\r\nexport function createNumberDeserializer(defaultValue: number | null = null): ParamDeserializer<number | null> {\r\n    return value => isMissing(value) ? defaultValue : parseFloat(value);\r\n}\r\n\r\n/**\r\n * Creates a serializer for parameters of type `boolean`.\r\n *\r\n * @param defaultValue Optional default value to return if the value to serialize is `undefined` or `null`.\r\n */\r\nexport function createBooleanSerializer(defaultValue: string | null = null): ParamSerializer<boolean | null> {\r\n    return model => isMissing(model) ? defaultValue : `${model}`;\r\n}\r\n\r\n/**\r\n * Creates a deserializer for parameters of type `boolean`.\r\n *\r\n * @param defaultValue Optional default value to return if the value to deserialize is `undefined` or `null`.\r\n */\r\nexport function createBooleanDeserializer(defaultValue: boolean | null = null): ParamDeserializer<boolean | null> {\r\n    return value => isMissing(value) ? defaultValue : (value === 'true' || value === '1');\r\n}\r\n\r\n/** @internal */\r\nexport const DEFAULT_STRING_SERIALIZER = createStringSerializer();\r\n\r\n/** @internal */\r\nexport const DEFAULT_STRING_DESERIALIZER = createStringDeserializer();\r\n\r\n/** @internal */\r\nexport const DEFAULT_NUMBER_SERIALIZER = createNumberSerializer();\r\n\r\n/** @internal */\r\nexport const DEFAULT_NUMBER_DESERIALIZER = createNumberDeserializer();\r\n\r\n/** @internal */\r\nexport const DEFAULT_BOOLEAN_SERIALIZER = createBooleanSerializer();\r\n\r\n/** @internal */\r\nexport const DEFAULT_BOOLEAN_DESERIALIZER = createBooleanDeserializer();","import { forkJoin, isObservable, Observable, of, Subject } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\nimport { areEqualUsing, isFunction, isMissing, isPresent, undefinedToNull, wrapIntoObservable, wrapTryCatch } from '../util';\r\nimport {\r\n    Comparator, MultiParamDeserializer,\r\n    MultiParamSerializer,\r\n    OnChangeFunction,\r\n    ParamCombinator,\r\n    ParamDeserializer,\r\n    ParamSerializer,\r\n    Partitioner,\r\n    Reducer\r\n} from '../types';\r\nimport { QueryParamGroup } from './query-param-group';\r\nimport { MultiQueryParamOpts, PartitionedQueryParamOpts, QueryParamOpts, QueryParamOptsBase } from './query-param-opts';\r\n\r\n/** @internal */\r\nabstract class AbstractQueryParamBase<T> {\r\n\r\n    public abstract value: T | null;\r\n\r\n    protected parent: QueryParamGroup | null = null;\r\n    protected readonly _valueChanges = new Subject<T | null>();\r\n    protected changeFunctions: OnChangeFunction<T>[] = [];\r\n\r\n    /**\r\n     * Emits the current value of this parameter whenever it changes.\r\n     *\r\n     * NOTE: This observable does not complete on its own, so ensure to unsubscribe from it.\r\n     */\r\n    public readonly valueChanges: Observable<T | null> = this._valueChanges.asObservable();\r\n\r\n    public _registerOnChange(fn: OnChangeFunction<T>): void {\r\n        this.changeFunctions.push(fn);\r\n    }\r\n\r\n    public _clearChangeFunctions(): void {\r\n        this.changeFunctions = [];\r\n    }\r\n\r\n    public abstract setValue(value: T | null, opts: {\r\n        emitEvent?: boolean,\r\n        onlySelf?: boolean,\r\n        emitModelToViewChange?: boolean,\r\n    }): void;\r\n\r\n    public _setParent(parent: QueryParamGroup | null): void {\r\n        if (this.parent && parent) {\r\n            throw new Error(`Parameter already belongs to a QueryParamGroup.`);\r\n        }\r\n\r\n        this.parent = parent;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Abstract base for {@link QueryParam} and {@link MultiQueryParam}.\r\n *\r\n * This base class holds most of the parameter's options, but is unaware of\r\n * how to actually (de-)serialize any values.\r\n */\r\nexport abstract class AbstractQueryParam<U, T> extends AbstractQueryParamBase<T> {\r\n\r\n    /**\r\n     * The current value of this parameter.\r\n     */\r\n    public value: T | null = null;\r\n\r\n    /**\r\n     * The name of the parameter to be used in the URL.\r\n     *\r\n     * This represents the name of the query parameter which will be\r\n     * used in the URL (e.g., `?q=`), which differs from the name of\r\n     * the {@link QueryParam} model used inside {@link QueryParamGroup}.\r\n     */\r\n    public readonly urlParam: string;\r\n\r\n    /** See {@link QueryParamOpts}. */\r\n    public readonly serialize: ParamSerializer<U>;\r\n\r\n    /** See {@link QueryParamOpts}. */\r\n    public readonly deserialize: ParamDeserializer<U>;\r\n\r\n    /** See {@link QueryParamOpts}. */\r\n    public readonly debounceTime: number | null;\r\n\r\n    /** See {@link QueryParamOpts}. */\r\n    public readonly emptyOn?: T | null;\r\n\r\n    /** See {@link QueryParamOpts}. */\r\n    public readonly compareWith?: Comparator<T | null>;\r\n\r\n    /** See {@link QueryParamOpts}. */\r\n    public readonly combineWith?: ParamCombinator<T>;\r\n\r\n    protected constructor(urlParam: string, opts: QueryParamOptsBase<U, T> = {}) {\r\n        super();\r\n        const { serialize, deserialize, debounceTime, compareWith, emptyOn, combineWith } = opts;\r\n\r\n        if (isMissing(urlParam)) {\r\n            throw new Error(`Please provide a URL parameter name for each query parameter.`);\r\n        }\r\n\r\n        if (!isFunction(serialize)) {\r\n            throw new Error(`serialize must be a function, but received ${serialize}`);\r\n        }\r\n\r\n        if (!isFunction(deserialize)) {\r\n            throw new Error(`deserialize must be a function, but received ${deserialize}`);\r\n        }\r\n\r\n        if (emptyOn !== undefined && !isFunction(compareWith)) {\r\n            throw new Error(`compareWith must be a function, but received ${compareWith}`);\r\n        }\r\n\r\n        if (isPresent(combineWith) && !isFunction(combineWith)) {\r\n            throw new Error(`combineWith must be a function, but received ${combineWith}`);\r\n        }\r\n\r\n        this.urlParam = urlParam;\r\n        this.serialize = wrapTryCatch(serialize, `Error while serializing value for ${this.urlParam}`);\r\n        this.deserialize = wrapTryCatch(deserialize, `Error while deserializing value for ${this.urlParam}`);\r\n        this.debounceTime = undefinedToNull(debounceTime);\r\n        this.emptyOn = emptyOn;\r\n        this.compareWith = compareWith;\r\n        this.combineWith = combineWith;\r\n    }\r\n\r\n    /**\r\n     * Updates the value of this parameter.\r\n     *\r\n     * If wired up with a {@link QueryParamGroup}, this will also synchronize\r\n     * the value to the URL.\r\n     */\r\n    public setValue(value: T | null, opts: {\r\n        emitEvent?: boolean,\r\n        onlySelf?: boolean,\r\n        emitModelToViewChange?: boolean,\r\n    } = {}): void {\r\n        this.value = value;\r\n\r\n        if (opts.emitModelToViewChange !== false) {\r\n            this.changeFunctions.forEach(changeFn => changeFn(value));\r\n        }\r\n\r\n        if (opts.emitEvent !== false) {\r\n            this._valueChanges.next(this.value);\r\n        }\r\n\r\n        if (isPresent(this.parent) && !opts.onlySelf) {\r\n            this.parent._updateValue({\r\n                emitEvent: opts.emitEvent,\r\n                emitModelToViewChange: false,\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Describes a single parameter.\r\n *\r\n * This is the description of a single parameter and essentially serves\r\n * as the glue between its representation in the URL and its connection\r\n * to a form control.\r\n */\r\nexport class QueryParam<T> extends AbstractQueryParam<T | null, T | null> implements Readonly<QueryParamOpts<T>> {\r\n\r\n    /** See {@link QueryParamOpts}. */\r\n    public readonly multi = false;\r\n\r\n    constructor(urlParam: string, opts: QueryParamOpts<T>) {\r\n        super(urlParam, opts);\r\n    }\r\n\r\n    /** @internal */\r\n    public serializeValue(value: T | null): string | null {\r\n        if (this.emptyOn !== undefined && areEqualUsing(value, this.emptyOn, this.compareWith!)) {\r\n            return null;\r\n        }\r\n\r\n        return this.serialize(value);\r\n    }\r\n\r\n    /** @internal */\r\n    public deserializeValue(value: string | null): Observable<T | null> {\r\n        if (this.emptyOn !== undefined && value === null) {\r\n            return of(this.emptyOn);\r\n        }\r\n\r\n        return wrapIntoObservable(this.deserialize(value)).pipe(first());\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Like {@link QueryParam}, but for array-typed parameters\r\n */\r\nexport class MultiQueryParam<T> extends AbstractQueryParam<T | null, (T | null)[]> implements Readonly<MultiQueryParamOpts<T>> {\r\n\r\n    /** See {@link QueryParamOpts}. */\r\n    public readonly multi = true;\r\n\r\n    /** See {@link MultiQueryParamOpts}. */\r\n    public readonly serializeAll?: MultiParamSerializer<T>;\r\n\r\n    /** See {@link MultiQueryParamOpts}. */\r\n    public readonly deserializeAll?: MultiParamDeserializer<T>;\r\n\r\n    constructor(urlParam: string, opts: MultiQueryParamOpts<T>) {\r\n        super(urlParam, opts);\r\n        const { serializeAll, deserializeAll } = opts;\r\n\r\n        if (serializeAll !== undefined) {\r\n            if (!isFunction(serializeAll)) {\r\n                throw new Error(`serializeAll must be a function, but received ${serializeAll}`);\r\n            }\r\n\r\n            this.serializeAll = wrapTryCatch(serializeAll, `Error while serializing value for ${this.urlParam}`);\r\n        }\r\n\r\n        if (deserializeAll !== undefined) {\r\n            if (!isFunction(deserializeAll)) {\r\n                throw new Error(`deserializeAll must be a function, but received ${deserializeAll}`);\r\n            }\r\n\r\n            this.deserializeAll = wrapTryCatch(deserializeAll, `Error while deserializing value for ${this.urlParam}`);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public serializeValue(value: (T | null)[] | null): (string | null)[] | null {\r\n        if (this.emptyOn !== undefined && areEqualUsing(value, this.emptyOn, this.compareWith!)) {\r\n            return null;\r\n        }\r\n\r\n        if (this.serializeAll !== undefined) {\r\n            return this.serializeAll(value);\r\n        }\r\n\r\n        return (value || []).map(this.serialize.bind(this));\r\n    }\r\n\r\n    /** @internal */\r\n    public deserializeValue(values: (string | null)[] | null): Observable<(T | null)[] | null> {\r\n        if (this.emptyOn !== undefined && (values || []).length === 0) {\r\n            return of(this.emptyOn);\r\n        }\r\n\r\n        if (this.deserializeAll !== undefined) {\r\n            return wrapIntoObservable(this.deserializeAll(values));\r\n        }\r\n\r\n        if (!values || values.length === 0) {\r\n            return of([]);\r\n        }\r\n\r\n        return forkJoin([...values.map(value => wrapIntoObservable(this.deserialize(value)).pipe(first()))]);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Describes a partitioned query parameter.\r\n *\r\n * This encapsulates a list of query parameters such that a single form control\r\n * can be bound against multiple URL parameters. To achieve this, functions must\r\n * be defined which can convert the models between the parameters.\r\n */\r\nexport class PartitionedQueryParam<T, G extends unknown[] = unknown[]> extends AbstractQueryParamBase<T> {\r\n\r\n    /** @internal */\r\n    public readonly queryParams: (QueryParam<G[number]> | MultiQueryParam<G[number]>)[];\r\n\r\n    /** @internal */\r\n    public readonly partition: Partitioner<T, G>;\r\n\r\n    /** @internal */\r\n    public readonly reduce: Reducer<G, T>;\r\n\r\n    constructor(\r\n        queryParams: (QueryParam<G[number]> | MultiQueryParam<G[number]>)[],\r\n        opts: PartitionedQueryParamOpts<T, G>,\r\n    ) {\r\n        super();\r\n\r\n        if (queryParams.length === 0) {\r\n            throw new Error(`Partitioned parameters must contain at least one parameter.`);\r\n        }\r\n\r\n        if (!isFunction(opts.partition)) {\r\n            throw new Error(`partition must be a function, but received ${opts.partition}`);\r\n        }\r\n\r\n        if (!isFunction(opts.reduce)) {\r\n            throw new Error(`reduce must be a function, but received ${opts.reduce}`);\r\n        }\r\n\r\n        this.queryParams = queryParams;\r\n        this.partition = opts.partition;\r\n        this.reduce = opts.reduce;\r\n    }\r\n\r\n    public get value(): T {\r\n        return this.reduce(this.queryParams.map(queryParam => queryParam.value) as G);\r\n    }\r\n\r\n    public setValue(value: T, opts: {\r\n        emitEvent?: boolean,\r\n        onlySelf?: boolean,\r\n        emitModelToViewChange?: boolean,\r\n    } = {}): void {\r\n        const partitioned = this.partition(value);\r\n        this.queryParams.forEach((queryParam, index) => queryParam.setValue(partitioned[index] as any, {\r\n            emitEvent: opts.emitEvent,\r\n            onlySelf: true,\r\n            emitModelToViewChange: false,\r\n        }));\r\n\r\n        if (opts.emitModelToViewChange !== false) {\r\n            this.changeFunctions.forEach(changeFn => changeFn(this.value));\r\n        }\r\n\r\n        if (opts.emitEvent !== false) {\r\n            this._valueChanges.next(this.value);\r\n        }\r\n    }\r\n\r\n}","import { Observable, Subject } from 'rxjs';\r\nimport { isMissing, undefinedToNull } from '../util';\r\nimport { OnChangeFunction } from '../types';\r\nimport { MultiQueryParam, QueryParam, PartitionedQueryParam } from './query-param';\r\nimport { RouterOptions } from '../router-adapter/router-adapter.interface';\r\nimport {QueryParamGroupOpts} from './query-param-opts';\r\n\r\n/**\r\n * Groups multiple {@link QueryParam} instances to a single unit.\r\n *\r\n * This \"bundles\" multiple parameters together such that changes can be emitted as a\r\n * complete unit. Collecting parameters into a group is required for the synchronization\r\n * to and from the URL.\r\n */\r\nexport class QueryParamGroup {\r\n\r\n    /** @internal */\r\n    private readonly _valueChanges = new Subject<Record<string, any>>();\r\n\r\n    /**\r\n     * Emits the values of all parameters in this group whenever at least one changes.\r\n     *\r\n     * This observable emits an object keyed by the {@QueryParam} names where each key\r\n     * carries the current value of the represented parameter. It emits whenever at least\r\n     * one parameter's value is changed.\r\n     *\r\n     * NOTE: This observable does not complete on its own, so ensure to unsubscribe from it.\r\n     */\r\n    public readonly valueChanges: Observable<Record<string, any>> = this._valueChanges.asObservable();\r\n\r\n    /** @internal */\r\n    private readonly _queryParamAdded$ = new Subject<string>();\r\n\r\n    /** @internal */\r\n    public readonly queryParamAdded$: Observable<string> = this._queryParamAdded$.asObservable();\r\n\r\n    /** @internal */\r\n    public readonly queryParams: { [ queryParamName: string ]: QueryParam<unknown> | MultiQueryParam<unknown> | PartitionedQueryParam<unknown> };\r\n\r\n    /** @internal */\r\n    public readonly routerOptions: RouterOptions;\r\n\r\n    /** @internal */\r\n    public readonly options: QueryParamGroupOpts;\r\n\r\n    private changeFunctions: OnChangeFunction<Record<string, any>>[] = [];\r\n\r\n    constructor(\r\n        queryParams: { [ queryParamName: string ]: QueryParam<unknown> | MultiQueryParam<unknown> | PartitionedQueryParam<unknown> },\r\n        extras: RouterOptions & QueryParamGroupOpts = {}\r\n    ) {\r\n        this.queryParams = queryParams;\r\n        this.routerOptions = extras;\r\n        this.options = extras;\r\n\r\n        Object.values(this.queryParams).forEach(queryParam => queryParam._setParent(this));\r\n    }\r\n\r\n    /** @internal */\r\n    public _registerOnChange(fn: OnChangeFunction<Record<string, any>>): void {\r\n        this.changeFunctions.push(fn);\r\n    }\r\n\r\n    /** @internal */\r\n    public _clearChangeFunctions(): void {\r\n        this.changeFunctions = [];\r\n    }\r\n\r\n    /**\r\n     * Retrieves a specific parameter from this group by name.\r\n     *\r\n     * This returns an instance of either {@link QueryParam}, {@link MultiQueryParam}\r\n     * or {@link PartitionedQueryParam} depending on the configuration, or `null`\r\n     * if no parameter with that name is found in this group.\r\n     *\r\n     * @param queryParamName The name of the parameter instance to retrieve.\r\n     */\r\n    public get(queryParamName: string): QueryParam<unknown> | MultiQueryParam<unknown> | PartitionedQueryParam<unknown> | null {\r\n        const param = this.queryParams[ queryParamName ];\r\n        if (!param) {\r\n            return null;\r\n        }\r\n\r\n        return param;\r\n    }\r\n\r\n    /**\r\n     * Adds a new {@link QueryParam} to this group.\r\n     *\r\n     * This adds the parameter under the given name to this group. The current\r\n     * URL will be evaluated to synchronize its value initially. Afterwards\r\n     * it is treated just like any other parameter in this group.\r\n     *\r\n     * @param queryParamName Name of the parameter to reference it with.\r\n     * @param queryParam The new parameter to add.\r\n     */\r\n    public add(queryParamName: string, queryParam: QueryParam<unknown> | MultiQueryParam<unknown> | PartitionedQueryParam<unknown>): void {\r\n        if (this.get(queryParamName)) {\r\n            throw new Error(`A parameter with name ${queryParamName} already exists.`);\r\n        }\r\n\r\n        this.queryParams[ queryParamName ] = queryParam;\r\n        queryParam._setParent(this);\r\n        this._queryParamAdded$.next(queryParamName);\r\n    }\r\n\r\n    /**\r\n     * Removes a {@link QueryParam} from this group.\r\n     *\r\n     * This removes the parameter defined by the provided name from this group.\r\n     * No further synchronization with this parameter will occur and it will not\r\n     * be reported in the value of this group anymore.\r\n     *\r\n     * @param queryParamName The name of the parameter to remove.\r\n     */\r\n    public remove(queryParamName: string): void {\r\n        const queryParam = this.get(queryParamName);\r\n        if (!queryParam) {\r\n            throw new Error(`No parameter with name ${queryParamName} found.`);\r\n        }\r\n\r\n        delete this.queryParams[ queryParamName ];\r\n        queryParam._setParent(null);\r\n        queryParam._clearChangeFunctions();\r\n    }\r\n\r\n    /**\r\n     * The current value of this group.\r\n     *\r\n     * See {@link QueryParamGroup#valueChanges} for a description of the format of\r\n     * the value.\r\n     */\r\n    public get value(): Record<string, any> {\r\n        const value: Record<string, any> = {};\r\n        Object.keys(this.queryParams).forEach(queryParamName => value[ queryParamName ] = this.queryParams[ queryParamName ].value);\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Updates the value of this group by merging it in.\r\n     *\r\n     * This sets the value of each provided parameter to the respective provided\r\n     * value. If a parameter is not listed, its value remains unchanged.\r\n     *\r\n     * @param value See {@link QueryParamGroup#valueChanges} for a description of the format.\r\n     * @param opts Additional options\r\n     */\r\n    public patchValue(value: Record<string, any>, opts: {\r\n        emitEvent?: boolean,\r\n        emitModelToViewChange?: boolean,\r\n    } = {}): void {\r\n        Object.keys(value).forEach(queryParamName => {\r\n            const queryParam = this.queryParams[ queryParamName ];\r\n            if (isMissing(queryParam)) {\r\n                return;\r\n            }\r\n\r\n            queryParam.setValue(value[ queryParamName ], {\r\n                emitEvent: opts.emitEvent,\r\n                onlySelf: true,\r\n                emitModelToViewChange: false,\r\n            });\r\n        });\r\n\r\n        this._updateValue(opts);\r\n    }\r\n\r\n    /**\r\n     * Updates the value of this group by overwriting it.\r\n     *\r\n     * This sets the value of each provided parameter to the respective provided\r\n     * value. If a parameter is not listed, its value is set to `undefined`.\r\n     *\r\n     * @param value See {@link QueryParamGroup#valueChanges} for a description of the format.\r\n     * @param opts Additional options\r\n     */\r\n    public setValue(value: Record<string, any> | null, opts: {\r\n        emitEvent?: boolean,\r\n        emitModelToViewChange?: boolean,\r\n    } = {}): void {\r\n        Object.keys(this.queryParams).forEach(queryParamName => {\r\n            this.queryParams[ queryParamName ].setValue(undefinedToNull(value?.[ queryParamName ]), {\r\n                emitEvent: opts.emitEvent,\r\n                onlySelf: true,\r\n                emitModelToViewChange: false,\r\n            });\r\n        });\r\n\r\n        this._updateValue(opts);\r\n    }\r\n\r\n    /** @internal */\r\n    public _updateValue(opts: {\r\n        emitEvent?: boolean,\r\n        emitModelToViewChange?: boolean,\r\n    } = {}): void {\r\n        if (opts.emitModelToViewChange !== false) {\r\n            this.changeFunctions.forEach(changeFn => changeFn(this.value));\r\n        }\r\n\r\n        if (opts.emitEvent !== false) {\r\n            this._valueChanges.next(this.value);\r\n        }\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport {\r\n    DEFAULT_BOOLEAN_DESERIALIZER,\r\n    DEFAULT_BOOLEAN_SERIALIZER,\r\n    DEFAULT_NUMBER_DESERIALIZER,\r\n    DEFAULT_NUMBER_SERIALIZER,\r\n    DEFAULT_STRING_DESERIALIZER,\r\n    DEFAULT_STRING_SERIALIZER\r\n} from './serializers';\r\nimport { LOOSE_IDENTITY_COMPARATOR } from './util';\r\nimport { RouterOptions } from './router-adapter/router-adapter.interface';\r\nimport { MultiQueryParam, QueryParam, PartitionedQueryParam } from './model/query-param';\r\nimport { QueryParamGroup } from './model/query-param-group';\r\nimport {\r\n    MultiQueryParamOpts,\r\n    PartitionedQueryParamOpts,\r\n    QueryParamGroupOpts,\r\n    QueryParamOpts\r\n} from './model/query-param-opts';\r\n\r\nfunction isMultiOpts<T>(opts: QueryParamOpts<T> | MultiQueryParamOpts<T>): opts is MultiQueryParamOpts<T> {\r\n    return opts.multi === true;\r\n}\r\n\r\n/**\r\n * Service to create parameters and groups.\r\n *\r\n * This service provides a simple API to create {@link QueryParamGroup} and {@link QueryParam}\r\n * instances and is the recommended way to set them up.\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class QueryParamBuilder {\r\n\r\n    /**\r\n     * Creates a new {@link QueryParamGroup}.\r\n     *\r\n     * This is the primary method to create a new group of parameters. Pass a list of\r\n     * {@link QueryParam} instances by using the `xxxParam` methods.\r\n     *\r\n     * @param queryParams List of {@link QueryParam}s keyed by a unique name.\r\n     * @param extras Additional parameters for this group, overriding global configuration.\r\n     * @returns The new {@link QueryParamGroup}.\r\n     */\r\n    public group(\r\n        queryParams: { [ name: string ]: QueryParam<any> | MultiQueryParam<any> | PartitionedQueryParam<any> },\r\n        extras: RouterOptions & QueryParamGroupOpts = {}\r\n    ): QueryParamGroup {\r\n        // TODO Maybe we should first validate that no two queryParams defined the same \"param\".\r\n        return new QueryParamGroup(queryParams, extras);\r\n    }\r\n\r\n    /** @ignore */\r\n    public partition<T, G1>(\r\n        queryParams: [QueryParam<G1> | MultiQueryParam<G1>],\r\n        opts: PartitionedQueryParamOpts<T, [G1]>\r\n    ): PartitionedQueryParam<T, [G1]>;\r\n    /** @ignore */\r\n    public partition<T, G1, G2>(\r\n        queryParams: [QueryParam<G1> | MultiQueryParam<G1>, QueryParam<G2> | MultiQueryParam<G2>],\r\n        opts: PartitionedQueryParamOpts<T, [G1, G2]>\r\n    ): PartitionedQueryParam<T, [G1, G2]>;\r\n    /** @ignore */\r\n    public partition<T, G1, G2, G3>(\r\n        queryParams: [QueryParam<G1> | MultiQueryParam<G1>, QueryParam<G2> | MultiQueryParam<G2>, QueryParam<G3> | MultiQueryParam<G3>],\r\n        opts: PartitionedQueryParamOpts<T, [G1, G2, G3]>\r\n    ): PartitionedQueryParam<T, [G1, G2, G3]>;\r\n    /**\r\n     * Partition a query parameter into multiple others.\r\n     *\r\n     * Partitioning is useful if you need to bind a single form control to multiple query parameters.\r\n     * For example, consider a {@code <select>} which represents both a field to sort by and the\r\n     * direction to sort in. If you want to encode these two information on separate URL parameters,\r\n     * you can define a single query parameter that is partitioned into two others.\r\n     *\r\n     * @param queryParams The query parameters making up this partition.\r\n     * @param opts See {@link PartitionedQueryParamOpts}.\r\n     */\r\n    public partition<T, G extends unknown[]>(\r\n        queryParams: (QueryParam<G[number]> | MultiQueryParam<G[number]>)[],\r\n        opts: PartitionedQueryParamOpts<T, G>\r\n    ): PartitionedQueryParam<T, G> {\r\n        return new PartitionedQueryParam(queryParams, opts);\r\n    }\r\n\r\n    /** @ignore */\r\n    public stringParam(urlParam: string, opts: MultiQueryParamOpts<string>): MultiQueryParam<string>;\r\n    /** @ignore */\r\n    public stringParam(urlParam: string, opts?: QueryParamOpts<string>): QueryParam<string>;\r\n    /**\r\n     * Create a new parameter of type `string`.\r\n     *\r\n     * See {@link QueryParamOpts}.\r\n     */\r\n    public stringParam(\r\n        urlParam: string,\r\n        opts: QueryParamOpts<string> | MultiQueryParamOpts<string> = {}\r\n    ): QueryParam<string> | MultiQueryParam<string> {\r\n        opts = {\r\n            serialize: DEFAULT_STRING_SERIALIZER,\r\n            deserialize: DEFAULT_STRING_DESERIALIZER,\r\n            compareWith: LOOSE_IDENTITY_COMPARATOR,\r\n            ...opts,\r\n        };\r\n\r\n        if (isMultiOpts(opts)) {\r\n            return new MultiQueryParam<string>(urlParam, opts);\r\n        } else {\r\n            return new QueryParam<string>(urlParam, opts);\r\n        }\r\n    }\r\n\r\n    /** @ignore */\r\n    public numberParam(urlParam: string, opts: MultiQueryParamOpts<number>): MultiQueryParam<number>;\r\n    /** @ignore */\r\n    public numberParam(urlParam: string, opts?: QueryParamOpts<number>): QueryParam<number>;\r\n    /**\r\n     * Create a new parameter of type `number`.\r\n     *\r\n     * See {@link QueryParamOpts}.\r\n     */\r\n    public numberParam(\r\n        urlParam: string,\r\n        opts: QueryParamOpts<number> | MultiQueryParamOpts<number> = {}\r\n    ): QueryParam<number> | MultiQueryParam<number> {\r\n        opts = {\r\n            serialize: DEFAULT_NUMBER_SERIALIZER,\r\n            deserialize: DEFAULT_NUMBER_DESERIALIZER,\r\n            compareWith: LOOSE_IDENTITY_COMPARATOR,\r\n            ...opts,\r\n        };\r\n\r\n        if (isMultiOpts(opts)) {\r\n            return new MultiQueryParam<number>(urlParam, opts);\r\n        } else {\r\n            return new QueryParam<number>(urlParam, opts);\r\n        }\r\n    }\r\n\r\n    /** @ignore */\r\n    public booleanParam(urlParam: string, opts: MultiQueryParamOpts<boolean>): MultiQueryParam<boolean>;\r\n    /** @ignore */\r\n    public booleanParam(urlParam: string, opts?: QueryParamOpts<boolean>): QueryParam<boolean>;\r\n    /**\r\n     * Create a new parameter of type `boolean`.\r\n     *\r\n     * See {@link QueryParamOpts}.\r\n     */\r\n    public booleanParam(\r\n        urlParam: string,\r\n        opts: QueryParamOpts<boolean> | MultiQueryParamOpts<boolean> = {}\r\n    ): QueryParam<boolean> | MultiQueryParam<boolean> {\r\n        opts = {\r\n            serialize: DEFAULT_BOOLEAN_SERIALIZER,\r\n            deserialize: DEFAULT_BOOLEAN_DESERIALIZER,\r\n            compareWith: LOOSE_IDENTITY_COMPARATOR,\r\n            ...opts,\r\n        };\r\n\r\n        if (isMultiOpts(opts)) {\r\n            return new MultiQueryParam<boolean>(urlParam, opts);\r\n        } else {\r\n            return new QueryParam<boolean>(urlParam, opts);\r\n        }\r\n    }\r\n\r\n    /** @ignore */\r\n    public param<T>(urlParam: string, opts: MultiQueryParamOpts<T>): MultiQueryParam<T>;\r\n    /** @ignore */\r\n    public param<T>(urlParam: string, opts?: QueryParamOpts<T>): QueryParam<T>;\r\n    /**\r\n     * Create a new parameter for a complex type.\r\n     *\r\n     * See {@link QueryParamOpts}.\r\n     */\r\n    public param<T>(\r\n        urlParam: string,\r\n        opts: QueryParamOpts<T> | MultiQueryParamOpts<T> = {}\r\n    ): QueryParam<T> | MultiQueryParam<T> {\r\n        opts = {\r\n            compareWith: LOOSE_IDENTITY_COMPARATOR,\r\n            ...opts,\r\n        };\r\n\r\n        if (isMultiOpts(opts)) {\r\n            return new MultiQueryParam<T>(urlParam, opts);\r\n        } else {\r\n            return new QueryParam<T>(urlParam, opts);\r\n        }\r\n    }\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Navigation, ParamMap, Params } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\n/**\r\n * Abstraction around the Angular Router used by ngqp in order to read from\r\n * or manipulate the URL.\r\n *\r\n * This abstraction only exists so we can provide a different adapter for the\r\n * examples on the website.\r\n *\r\n * @internal\r\n */\r\nexport interface RouterAdapter {\r\n\r\n    /** @internal */\r\n    url: string;\r\n\r\n    /** @internal */\r\n    queryParamMap: Observable<ParamMap>;\r\n\r\n    /** @internal */\r\n    navigate(queryParams: Params, extras?: RouterOptions & { state?: any }): Promise<boolean>;\r\n\r\n    /** @internal */\r\n    getCurrentNavigation(): Pick<Navigation, 'trigger' | 'extras'> | null;\r\n\r\n}\r\n\r\n/**\r\n * Options to be provided when a navigation is started to update the URL.\r\n * These options are simply forwarded to Router#navigate.\r\n */\r\nexport interface RouterOptions {\r\n    replaceUrl?: boolean;\r\n    preserveFragment?: boolean;\r\n}\r\n\r\n/**\r\n * See {@link RouterOptions}.\r\n */\r\nexport const DefaultRouterOptions: RouterOptions = {\r\n    replaceUrl: true,\r\n    preserveFragment: true,\r\n};\r\n\r\n/** @internal */\r\nexport const NGQP_ROUTER_ADAPTER = new InjectionToken<RouterAdapter>('NGQP_ROUTER_ADAPTER');\r\n\r\n/** Injection token to provide {@link RouterOptions}. */\r\nexport const NGQP_ROUTER_OPTIONS = new InjectionToken<RouterOptions>('NGQP_ROUTER_OPTIONS');","import { Inject, Injectable, isDevMode, OnDestroy, Optional } from '@angular/core';\r\nimport { Params } from '@angular/router';\r\nimport { EMPTY, forkJoin, from, Observable, Subject, zip } from 'rxjs';\r\nimport {\r\n    catchError,\r\n    concatMap,\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    filter,\r\n    map,\r\n    startWith,\r\n    switchMap,\r\n    takeUntil,\r\n    tap\r\n} from 'rxjs/operators';\r\nimport { compareParamMaps, filterParamMap, isMissing, isPresent, NOP } from '../util';\r\nimport { QueryParamGroup } from '../model/query-param-group';\r\nimport { MultiQueryParam, PartitionedQueryParam, QueryParam } from '../model/query-param';\r\nimport { NGQP_ROUTER_ADAPTER, NGQP_ROUTER_OPTIONS, RouterAdapter, RouterOptions } from '../router-adapter/router-adapter.interface';\r\nimport { QueryParamAccessor } from './query-param-accessor.interface';\r\n\r\n/** @internal */\r\nfunction isMultiQueryParam<T>(queryParam: QueryParam<T> | MultiQueryParam<T>): queryParam is MultiQueryParam<T> {\r\n    return queryParam.multi;\r\n}\r\n\r\n/** @internal */\r\nclass NavigationData {\r\n    constructor(public params: Params, public synthetic: boolean = false) {\r\n    }\r\n}\r\n\r\n/**\r\n * Service implementing the synchronization logic\r\n *\r\n * This service is the key to the synchronization process by binding a {@link QueryParamGroup}\r\n * to the router.\r\n *\r\n * @internal\r\n */\r\n@Injectable()\r\nexport class QueryParamGroupService implements OnDestroy {\r\n\r\n    /** The {@link QueryParamGroup} to bind. */\r\n    private queryParamGroup: QueryParamGroup | null = null;\r\n\r\n    /** List of {@link QueryParamAccessor} registered to this service. */\r\n    private directives = new Map<string, QueryParamAccessor[]>();\r\n\r\n    /**\r\n     * Queue of navigation parameters\r\n     *\r\n     * A queue is used for navigations as we need to make sure all parameter changes\r\n     * are executed in sequence as otherwise navigations might overwrite each other.\r\n     */\r\n    private queue$ = new Subject<NavigationData>();\r\n\r\n    /** @ignore */\r\n    private synchronizeRouter$ = new Subject<void>();\r\n\r\n    /** @ignore */\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(\r\n        @Inject(NGQP_ROUTER_ADAPTER) private routerAdapter: RouterAdapter,\r\n        @Optional() @Inject(NGQP_ROUTER_OPTIONS) private globalRouterOptions: RouterOptions\r\n    ) {\r\n        this.setupNavigationQueue();\r\n    }\r\n\r\n    /** @ignore */\r\n    public ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n\r\n        this.synchronizeRouter$.complete();\r\n\r\n        this.queryParamGroup?._clearChangeFunctions();\r\n        if (this.queryParamGroup?.options?.clearOnDestroy) {\r\n            const nullParams = Object.values(this.queryParamGroup.queryParams)\r\n                .map(queryParam => this.wrapIntoPartition(queryParam))\r\n                .map(partitionedQueryParam => partitionedQueryParam.queryParams.map(queryParam => queryParam.urlParam))\r\n                .reduce((a, b) => [...a, ...b], [])\r\n                .map(urlParam => ({[urlParam]: null}))\r\n                .reduce((a, b) => ({...a, ...b}), {});\r\n            this.routerAdapter.navigate(nullParams, {\r\n                replaceUrl: true,\r\n            }).then();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Uses the given {@link QueryParamGroup} for synchronization.\r\n     */\r\n    public setQueryParamGroup(queryParamGroup: QueryParamGroup): void {\r\n        // FIXME: If this is called when we already have a group, we probably need to do\r\n        //        some cleanup first.\r\n        if (this.queryParamGroup) {\r\n            throw new Error(`A QueryParamGroup has already been setup. Changing the group is currently not supported.`);\r\n        }\r\n\r\n        this.queryParamGroup = queryParamGroup;\r\n        this.startSynchronization();\r\n    }\r\n\r\n    /**\r\n     * Registers a {@link QueryParamAccessor}.\r\n     */\r\n    public registerQueryParamDirective(directive: QueryParamAccessor): void {\r\n        if (!directive.valueAccessor) {\r\n            throw new Error(`No value accessor found for the form control. Please make sure to implement ControlValueAccessor on this component.`);\r\n        }\r\n\r\n        // Capture the name here, particularly for the queue below to avoid re-evaluating\r\n        // it as it might change over time.\r\n        const queryParamName = directive.name;\r\n        const partitionedQueryParam = this.getQueryParamAsPartition(queryParamName);\r\n\r\n        // Chances are that we read the initial route before a directive has been registered here.\r\n        // The value in the model will be correct, but we need to sync it to the view once initially.\r\n        directive.valueAccessor.writeValue(partitionedQueryParam.value);\r\n\r\n        // Proxy updates from the view to debounce them (if needed).\r\n        const queues = partitionedQueryParam.queryParams.map(() => new Subject<unknown>());\r\n        zip(\r\n            ...queues.map((queue$, index) => {\r\n                const queryParam = partitionedQueryParam.queryParams[index];\r\n                return queue$.pipe(\r\n                    isPresent(queryParam.debounceTime) ? debounceTime(queryParam.debounceTime) : tap(),\r\n                );\r\n            })\r\n        ).pipe(\r\n            // Do not synchronize while the param is detached from the group\r\n            filter(() => !!this.getQueryParamGroup().get(queryParamName)),\r\n            map((newValue: unknown[]) => this.getParamsForValue(partitionedQueryParam, partitionedQueryParam.reduce(newValue))),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe(params => this.enqueueNavigation(new NavigationData(params)));\r\n\r\n        directive.valueAccessor.registerOnChange((newValue: unknown) => {\r\n            const partitioned = partitionedQueryParam.partition(newValue);\r\n            queues.forEach((queue$, index) => queue$.next(partitioned[index]));\r\n        });\r\n\r\n        this.directives.set(queryParamName, [...(this.directives.get(queryParamName) || []), directive]);\r\n    }\r\n\r\n    /**\r\n     * Deregisters a {@link QueryParamAccessor} by referencing its name.\r\n     */\r\n    public deregisterQueryParamDirective(queryParamName: string): void {\r\n        if (!queryParamName) {\r\n            return;\r\n        }\r\n\r\n        const directives = this.directives.get(queryParamName);\r\n        if (!directives) {\r\n            return;\r\n        }\r\n\r\n        directives.forEach(directive => {\r\n            directive.valueAccessor.registerOnChange(NOP);\r\n            directive.valueAccessor.registerOnTouched(NOP);\r\n        });\r\n\r\n        this.directives.delete(queryParamName);\r\n        const queryParam = this.getQueryParamGroup().get(queryParamName);\r\n        if (queryParam) {\r\n            queryParam._clearChangeFunctions();\r\n        }\r\n    }\r\n\r\n    private startSynchronization() {\r\n        this.setupGroupChangeListener();\r\n        this.setupParamChangeListeners();\r\n        this.setupRouterListener();\r\n\r\n        this.watchNewParams();\r\n    }\r\n\r\n    /** Listens for programmatic changes on group level and synchronizes to the router. */\r\n    private setupGroupChangeListener(): void {\r\n        this.getQueryParamGroup()._registerOnChange((newValue: Record<string, unknown> | null) => {\r\n            if (newValue === null) {\r\n                throw new Error(`Received null value from QueryParamGroup.`);\r\n            }\r\n\r\n            let params: Params = {};\r\n            Object.keys(newValue).forEach(queryParamName => {\r\n                const queryParam = this.getQueryParamGroup().get(queryParamName);\r\n                if (isMissing(queryParam)) {\r\n                    return;\r\n                }\r\n\r\n                params = { ...params, ...this.getParamsForValue(queryParam, newValue[ queryParamName ]) };\r\n            });\r\n\r\n            this.enqueueNavigation(new NavigationData(params, true));\r\n        });\r\n    }\r\n\r\n    /** Listens for programmatic changes on parameter level and synchronizes to the router. */\r\n    private setupParamChangeListeners(): void {\r\n        Object.keys(this.getQueryParamGroup().queryParams)\r\n            .forEach(queryParamName => this.setupParamChangeListener(queryParamName));\r\n    }\r\n\r\n    private setupParamChangeListener(queryParamName: string): void {\r\n        const queryParam = this.getQueryParamGroup().get(queryParamName);\r\n        if (!queryParam) {\r\n            throw new Error(`No param in group found for name ${queryParamName}`);\r\n        }\r\n\r\n        queryParam._registerOnChange((newValue: unknown) =>\r\n            this.enqueueNavigation(new NavigationData(this.getParamsForValue(queryParam, newValue), true))\r\n        );\r\n    }\r\n\r\n    /** Listens for changes in the router and synchronizes to the model. */\r\n    private setupRouterListener(): void {\r\n        this.synchronizeRouter$.pipe(\r\n            startWith(undefined),\r\n            switchMap(() => this.routerAdapter.queryParamMap.pipe(\r\n                // We want to ignore changes to query parameters which aren't related to this\r\n                // particular group; however, we do need to react if one of our parameters has\r\n                // vanished when it was set before.\r\n                distinctUntilChanged((previousMap, currentMap) => {\r\n                    const keys = Object.values(this.getQueryParamGroup().queryParams)\r\n                        .map(queryParam => this.wrapIntoPartition(queryParam))\r\n                        .map(partitionedQueryParam => partitionedQueryParam.queryParams.map(queryParam => queryParam.urlParam))\r\n                        .reduce((a, b) => [...a, ...b], []);\r\n\r\n                    // It is important that we filter the maps only here so that both are filtered\r\n                    // with the same set of keys; otherwise, e.g. removing a parameter from the group\r\n                    // would interfere.\r\n                    return compareParamMaps(filterParamMap(previousMap, keys), filterParamMap(currentMap, keys));\r\n                }),\r\n            )),\r\n            switchMap(queryParamMap => {\r\n                // We need to capture this right here since this is only set during the on-going navigation.\r\n                const synthetic = this.isSyntheticNavigation();\r\n                const queryParamNames = Object.keys(this.getQueryParamGroup().queryParams);\r\n\r\n                return forkJoin([...queryParamNames]\r\n                    .map(queryParamName => {\r\n                        const partitionedQueryParam = this.getQueryParamAsPartition(queryParamName);\r\n\r\n                        return forkJoin<unknown[]>([...partitionedQueryParam.queryParams]\r\n                            .map(queryParam => isMultiQueryParam<unknown>(queryParam)\r\n                                ? queryParam.deserializeValue(queryParamMap.getAll(queryParam.urlParam))\r\n                                : queryParam.deserializeValue(queryParamMap.get(queryParam.urlParam))\r\n                            )\r\n                        ).pipe(\r\n                            map(newValues => partitionedQueryParam.reduce(newValues)),\r\n                            tap(newValue => {\r\n                                const directives = this.directives.get(queryParamName);\r\n                                if (directives) {\r\n                                    directives.forEach(directive => directive.valueAccessor.writeValue(newValue));\r\n                                }\r\n                            }),\r\n                            map(newValue => {\r\n                                return { [ queryParamName ]: newValue };\r\n                            }),\r\n                            takeUntil(this.destroy$),\r\n                        );\r\n                    })\r\n                ).pipe(\r\n                    map((values: Record<string, unknown>[]) => values.reduce((groupValue, value) => {\r\n                        return {\r\n                            ...groupValue,\r\n                            ...value,\r\n                        };\r\n                    }, {})),\r\n                    tap(groupValue => this.getQueryParamGroup().setValue(groupValue, {\r\n                        emitEvent: !synthetic,\r\n                        emitModelToViewChange: false,\r\n                    })),\r\n                );\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe();\r\n    }\r\n\r\n    /** Listens for newly added parameters and starts synchronization for them. */\r\n    private watchNewParams(): void {\r\n        this.getQueryParamGroup().queryParamAdded$.pipe(\r\n            takeUntil(this.destroy$)\r\n        ).subscribe(queryParamName => {\r\n            this.setupParamChangeListener(queryParamName);\r\n            this.synchronizeRouter$.next();\r\n        });\r\n    }\r\n\r\n    /** Returns true if the current navigation is synthetic. */\r\n    private isSyntheticNavigation(): boolean {\r\n        const navigation = this.routerAdapter.getCurrentNavigation();\r\n        if (!navigation || navigation.trigger !== 'imperative') {\r\n            // When using the back / forward buttons, the state is passed along with it, even though\r\n            // for us it's now a navigation initiated by the user. Therefore, a navigation can only\r\n            // be synthetic if it has been triggered imperatively.\r\n            // See https://github.com/angular/angular/issues/28108.\r\n            return false;\r\n        }\r\n\r\n        return navigation.extras && navigation.extras.state && navigation.extras.state['synthetic'];\r\n    }\r\n\r\n    /** Subscribes to the parameter queue and executes navigations in sequence. */\r\n    private setupNavigationQueue() {\r\n        this.queue$.pipe(\r\n            takeUntil(this.destroy$),\r\n            concatMap(data => this.navigateSafely(data)),\r\n        ).subscribe();\r\n    }\r\n\r\n    private navigateSafely(data: NavigationData): Observable<boolean> {\r\n        return from(this.routerAdapter.navigate(data.params, {\r\n            ...this.routerOptions,\r\n            state: { synthetic: data.synthetic },\r\n        })).pipe(\r\n            catchError((err: unknown) => {\r\n                if (isDevMode()) {\r\n                    console.error(`There was an error while navigating`, err);\r\n                }\r\n\r\n                return EMPTY;\r\n            })\r\n        );\r\n    }\r\n\r\n    /** Sends a change of parameters to the queue. */\r\n    private enqueueNavigation(data: NavigationData): void {\r\n        this.queue$.next(data);\r\n    }\r\n\r\n    /**\r\n     * Returns the full set of parameters given a value for a parameter model.\r\n     *\r\n     * This consists mainly of properly serializing the model value and ensuring to take\r\n     * side effect changes into account that may have been configured.\r\n     */\r\n    private getParamsForValue(queryParam: QueryParam<unknown> | MultiQueryParam<unknown> | PartitionedQueryParam<unknown>, value: any): Params {\r\n        const partitionedQueryParam = this.wrapIntoPartition(queryParam);\r\n        const partitioned = partitionedQueryParam.partition(value);\r\n\r\n        const combinedParams = partitionedQueryParam.queryParams\r\n            .map((current, index) => isMissing(current.combineWith) ? null : current.combineWith(partitioned[index] as any))\r\n            .reduce((a, b) => {\r\n                return { ...(a || {}), ...(b || {}) };\r\n            }, {});\r\n\r\n        const newValues = partitionedQueryParam.queryParams\r\n            .map((current, index) => {\r\n                return {\r\n                    [ current.urlParam ]: current.serializeValue(partitioned[index] as any),\r\n                };\r\n            })\r\n            .reduce((a, b) => {\r\n                return { ...a, ...b };\r\n            }, {});\r\n\r\n        // Note that we list the side-effect parameters first so that our actual parameter can't be\r\n        // overridden by it.\r\n        return {\r\n            ...combinedParams,\r\n            ...newValues,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the current set of options to pass to the router.\r\n     *\r\n     * This merges the global configuration with the group specific configuration.\r\n     */\r\n    private get routerOptions(): RouterOptions {\r\n        const groupOptions = this.getQueryParamGroup().routerOptions;\r\n\r\n        return {\r\n            ...(this.globalRouterOptions || {}),\r\n            ...(groupOptions || {}),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the query parameter with the given name as a partition.\r\n     *\r\n     * If the query parameter is partitioned, it is returned unchanged. Otherwise\r\n     * it is wrapped into a noop partition. This makes it easy to operate on\r\n     * query parameters independent of whether they are partitioned.\r\n     */\r\n    private getQueryParamAsPartition(queryParamName: string): PartitionedQueryParam<unknown> {\r\n        const queryParam = this.getQueryParamGroup().get(queryParamName);\r\n        if (!queryParam) {\r\n            throw new Error(`Could not find query param with name ${queryParamName}. Did you forget to add it to your QueryParamGroup?`);\r\n        }\r\n\r\n        return this.wrapIntoPartition(queryParam);\r\n    }\r\n\r\n    /**\r\n     * Wraps a query parameter into a partition if it isn't already.\r\n     */\r\n    private wrapIntoPartition(\r\n        queryParam: QueryParam<unknown> | MultiQueryParam<unknown> | PartitionedQueryParam<unknown>\r\n    ): PartitionedQueryParam<unknown> {\r\n        if (queryParam instanceof PartitionedQueryParam) {\r\n            return queryParam;\r\n        }\r\n\r\n        return new PartitionedQueryParam<unknown>([queryParam], {\r\n            partition: value => [value],\r\n            reduce: values => values[0],\r\n        });\r\n    }\r\n\r\n    private getQueryParamGroup(): QueryParamGroup {\r\n        if (!this.queryParamGroup) {\r\n            throw new Error(`No QueryParamGroup has been registered yet.`);\r\n        }\r\n\r\n        return this.queryParamGroup;\r\n    }\r\n\r\n}","import { Directive, ElementRef, forwardRef, HostListener, Inject, Optional, PLATFORM_ID, Provider, Renderer2 } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n/** @ignore */\r\nconst NGQP_DEFAULT_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => DefaultControlValueAccessorDirective),\r\n    multi: true\r\n};\r\n\r\n/** @ignore */\r\nfunction isAndroid(navigator: Navigator): boolean {\r\n    return /android (\\d+)/.test(navigator.userAgent.toLowerCase());\r\n}\r\n\r\n/** @ignore */\r\n@Directive({\r\n    selector: 'input:not([type=checkbox]):not([type=radio])[queryParamName],textarea[queryParamName],' +\r\n              'input:not([type=checkbox]):not([type=radio])[queryParam],textarea[queryParam]',\r\n    providers: [NGQP_DEFAULT_VALUE_ACCESSOR],\r\n})\r\nexport class DefaultControlValueAccessorDirective implements ControlValueAccessor {\r\n\r\n    private readonly supportsComposition: boolean;\r\n    private composing = false;\r\n\r\n    private fnChange = (_: string) => {};\r\n    private fnTouched = () => {};\r\n\r\n    @HostListener('input', ['$event'])\r\n    public onInput(event: UIEvent) {\r\n        if (this.supportsComposition && this.composing) {\r\n            return;\r\n        }\r\n\r\n        this.fnChange((event.target as HTMLInputElement).value);\r\n    }\r\n\r\n    @HostListener('blur')\r\n    public onBlur() {\r\n        this.fnTouched();\r\n    }\r\n\r\n    @HostListener('compositionstart')\r\n    public onCompositionStart() {\r\n        this.composing = true;\r\n    }\r\n\r\n    @HostListener('compositionend', ['$event'])\r\n    public onCompositionEnd(event: UIEvent) {\r\n        this.composing = false;\r\n        if (this.supportsComposition) {\r\n            this.fnChange((event.target as HTMLInputElement).value);\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        @Optional() @Inject(PLATFORM_ID) private platformId: string | null,\r\n        private renderer: Renderer2,\r\n        private elementRef: ElementRef<HTMLInputElement | HTMLTextAreaElement>\r\n    ) {\r\n        this.supportsComposition = isPlatformBrowser(this.platformId || '') && !isAndroid(window.navigator);\r\n    }\r\n\r\n    public writeValue(value: string) {\r\n        const normalizedValue = value === null ? '' : value;\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'value', normalizedValue);\r\n    }\r\n\r\n    public registerOnChange(fn: any) {\r\n        this.fnChange = fn;\r\n    }\r\n\r\n    public registerOnTouched(fn: any) {\r\n        this.fnTouched = fn;\r\n    }\r\n\r\n    public setDisabledState(isDisabled: boolean) {\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n\r\n}","import { Directive, ElementRef, forwardRef, HostListener, Provider, Renderer2 } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n/** @ignore */\r\nconst NGQP_RANGE_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => RangeControlValueAccessorDirective),\r\n    multi: true\r\n};\r\n\r\n/** @ignore */\r\n@Directive({\r\n    selector: 'input[type=range][queryParamName],input[type=range][queryParam]',\r\n    providers: [NGQP_RANGE_VALUE_ACCESSOR],\r\n})\r\nexport class RangeControlValueAccessorDirective implements ControlValueAccessor {\r\n\r\n    private fnChange = (_: number | null) => {};\r\n    private fnTouched = () => {};\r\n\r\n    @HostListener('input', ['$event'])\r\n    public onInput(event: UIEvent) {\r\n        const value = (event.target as HTMLInputElement).value;\r\n        this.fnChange(value === '' ? null : parseFloat(value));\r\n    }\r\n\r\n    @HostListener('blur')\r\n    public onBlur() {\r\n        this.fnTouched();\r\n    }\r\n\r\n    constructor(private renderer: Renderer2, private elementRef: ElementRef<HTMLInputElement>) {\r\n    }\r\n\r\n    public writeValue(value: any) {\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'value', parseFloat(value));\r\n    }\r\n\r\n    public registerOnChange(fn: any) {\r\n        this.fnChange = fn;\r\n    }\r\n\r\n    public registerOnTouched(fn: any) {\r\n        this.fnTouched = fn;\r\n    }\r\n\r\n    public setDisabledState(isDisabled: boolean) {\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n\r\n}","import { Directive, ElementRef, forwardRef, HostListener, Provider, Renderer2 } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n/** @ignore */\r\nconst NGQP_NUMBER_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => NumberControlValueAccessorDirective),\r\n    multi: true\r\n};\r\n\r\n/** @ignore */\r\n@Directive({\r\n    selector: 'input[type=number][queryParamName],input[type=number][queryParam]',\r\n    providers: [NGQP_NUMBER_VALUE_ACCESSOR],\r\n})\r\nexport class NumberControlValueAccessorDirective implements ControlValueAccessor {\r\n\r\n    private fnChange = (_: number | null) => {};\r\n    private fnTouched = () => {};\r\n\r\n    @HostListener('input', ['$event'])\r\n    public onInput(event: UIEvent) {\r\n        const value = (event.target as HTMLInputElement).value;\r\n        this.fnChange(value === '' ? null : parseFloat(value));\r\n    }\r\n\r\n    @HostListener('blur')\r\n    public onBlur() {\r\n        this.fnTouched();\r\n    }\r\n\r\n    constructor(private renderer: Renderer2, private elementRef: ElementRef<HTMLInputElement>) {\r\n    }\r\n\r\n    public writeValue(value: any) {\r\n        const normalizedValue = value === null ? '' : value;\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'value', normalizedValue);\r\n    }\r\n\r\n    public registerOnChange(fn: any) {\r\n        this.fnChange = fn;\r\n    }\r\n\r\n    public registerOnTouched(fn: any) {\r\n        this.fnTouched = fn;\r\n    }\r\n\r\n    public setDisabledState(isDisabled: boolean) {\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n\r\n}","import { Directive, ElementRef, forwardRef, HostListener, Provider, Renderer2 } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n/** @ignore */\r\nconst NGQP_CHECKBOX_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => CheckboxControlValueAccessorDirective),\r\n    multi: true\r\n};\r\n\r\n/** @ignore */\r\n@Directive({\r\n    selector: 'input[type=checkbox][queryParamName],input[type=checkbox][queryParam]',\r\n    providers: [NGQP_CHECKBOX_VALUE_ACCESSOR],\r\n})\r\nexport class CheckboxControlValueAccessorDirective implements ControlValueAccessor {\r\n\r\n    private fnChange = (_: boolean) => {};\r\n    private fnTouched = () => {};\r\n\r\n    @HostListener('change', ['$event'])\r\n    public onInput(event: UIEvent) {\r\n        this.fnChange((event.target as HTMLInputElement).checked);\r\n    }\r\n\r\n    @HostListener('blur')\r\n    public onBlur() {\r\n        this.fnTouched();\r\n    }\r\n\r\n    constructor(private renderer: Renderer2, private elementRef: ElementRef<HTMLInputElement>) {\r\n    }\r\n\r\n    public writeValue(value: boolean) {\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'checked', value);\r\n    }\r\n\r\n    public registerOnChange(fn: any) {\r\n        this.fnChange = fn;\r\n    }\r\n\r\n    public registerOnTouched(fn: any) {\r\n        this.fnTouched = fn;\r\n    }\r\n\r\n    public setDisabledState(isDisabled: boolean) {\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n\r\n}","import { Directive, ElementRef, forwardRef, HostListener, Provider, Renderer2 } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { undefinedToNull } from '../util';\r\n\r\n/** @ignore */\r\nconst NGQP_SELECT_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectControlValueAccessorDirective),\r\n    multi: true\r\n};\r\n\r\n/** @ignore */\r\n@Directive({\r\n    selector: 'select:not([multiple])[queryParamName],select:not([multiple])[queryParam]',\r\n    providers: [NGQP_SELECT_VALUE_ACCESSOR],\r\n})\r\nexport class SelectControlValueAccessorDirective<T> implements ControlValueAccessor {\r\n\r\n    public value: T | null = null;\r\n    private selectedId: string | null = null;\r\n    private optionMap = new Map<string, T>();\r\n\r\n    private idCounter = 0;\r\n    private fnChange = (_: T | null) => {};\r\n    private fnTouched = () => {};\r\n\r\n    @HostListener('change', ['$event'])\r\n    public onChange(event: UIEvent) {\r\n        this.selectedId = (event.target as HTMLOptionElement).value;\r\n        this.value = undefinedToNull(this.optionMap.get(this.selectedId));\r\n        this.fnChange(this.value);\r\n    }\r\n\r\n    @HostListener('blur')\r\n    public onTouched() {\r\n        this.fnTouched();\r\n    }\r\n\r\n    constructor(private renderer: Renderer2, private elementRef: ElementRef<HTMLSelectElement>) {\r\n    }\r\n\r\n    public writeValue(value: T | null) {\r\n        this.value = value;\r\n\r\n        this.selectedId = value === null ? null : this.getOptionId(value);\r\n        if (this.selectedId === null) {\r\n            this.renderer.setProperty(this.elementRef.nativeElement, 'selectedIndex', -1);\r\n        }\r\n\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'value', this.selectedId);\r\n    }\r\n\r\n    public registerOnChange(fn: any) {\r\n        this.fnChange = fn;\r\n    }\r\n\r\n    public registerOnTouched(fn: any) {\r\n        this.fnTouched = fn;\r\n    }\r\n\r\n    public setDisabledState(isDisabled: boolean) {\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n\r\n    public registerOption(): string {\r\n        return (this.idCounter++).toString();\r\n    }\r\n\r\n    public deregisterOption(id: string): void {\r\n        this.optionMap.delete(id);\r\n    }\r\n\r\n    public updateOptionValue(id: string, value: T): void {\r\n        this.optionMap.set(id, value);\r\n\r\n        if (this.selectedId === id) {\r\n            this.fnChange(value);\r\n        }\r\n    }\r\n\r\n    private getOptionId(value: T): string | null {\r\n        for (const id of Array.from(this.optionMap.keys())) {\r\n            if (this.optionMap.get(id) === value) {\r\n                return id;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}","import { Directive, ElementRef, forwardRef, HostListener, Provider, Renderer2 } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { MultiSelectOptionDirective } from './multi-select-option.directive';\r\n\r\n/** @ignore */\r\nconst NGQP_MULTI_SELECT_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => MultiSelectControlValueAccessorDirective),\r\n    multi: true\r\n};\r\n\r\n/** @ignore */\r\n@Directive({\r\n    selector: 'select[multiple][queryParamName],select[multiple][queryParam]',\r\n    providers: [NGQP_MULTI_SELECT_VALUE_ACCESSOR],\r\n})\r\nexport class MultiSelectControlValueAccessorDirective<T> implements ControlValueAccessor {\r\n\r\n    private selectedIds: string[] = [];\r\n    private options = new Map<string, MultiSelectOptionDirective<T>>();\r\n    private optionMap = new Map<string, T>();\r\n\r\n    private idCounter = 0;\r\n    private fnChange = (_: T[]) => {};\r\n    private fnTouched = () => {};\r\n\r\n    @HostListener('change')\r\n    public onChange() {\r\n        this.selectedIds = Array.from(this.options.entries())\r\n            .filter(([id, option]) => option.selected)\r\n            .map(([id]) => id);\r\n        const values = this.selectedIds.map(id => this.optionMap.get(id)!);\r\n        this.fnChange(values);\r\n    }\r\n\r\n    @HostListener('blur')\r\n    public onTouched() {\r\n        this.fnTouched();\r\n    }\r\n\r\n    constructor(private renderer: Renderer2, private elementRef: ElementRef<HTMLSelectElement>) {\r\n    }\r\n\r\n    public writeValue(values: T[]) {\r\n        values = values === null ? <T[]>[] : values;\r\n        if (!Array.isArray(values)) {\r\n            throw new Error(`Provided a non-array value to select[multiple]: ${values}`);\r\n        }\r\n\r\n        this.selectedIds = values\r\n            .map(value => this.getOptionId(value))\r\n            .filter((id: string | null): id is string => id !== null);\r\n        this.options.forEach((option, id) => option.selected = this.selectedIds.includes(id));\r\n    }\r\n\r\n    public registerOnChange(fn: any) {\r\n        this.fnChange = fn;\r\n    }\r\n\r\n    public registerOnTouched(fn: any) {\r\n        this.fnTouched = fn;\r\n    }\r\n\r\n    public setDisabledState(isDisabled: boolean) {\r\n        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n\r\n    public registerOption(option: MultiSelectOptionDirective<T>): string {\r\n        const newId = (this.idCounter++).toString();\r\n        this.options.set(newId, option);\r\n        return newId;\r\n    }\r\n\r\n    public deregisterOption(id: string): void {\r\n        this.optionMap.delete(id);\r\n    }\r\n\r\n    public updateOptionValue(id: string, value: T): void {\r\n        this.optionMap.set(id, value);\r\n        if (this.selectedIds.includes(id)) {\r\n            this.onChange();\r\n        }\r\n    }\r\n\r\n    private getOptionId(value: T): string | null {\r\n        for (const id of Array.from(this.optionMap.keys())) {\r\n            if (this.optionMap.get(id) === value) {\r\n                return id;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}","import { RangeControlValueAccessorDirective } from './range-control-value-accessor.directive';\r\nimport { NumberControlValueAccessorDirective } from './number-control-value-accessor.directive';\r\nimport { DefaultControlValueAccessorDirective } from './default-control-value-accessor.directive';\r\nimport { CheckboxControlValueAccessorDirective } from './checkbox-control-value-accessor.directive';\r\nimport { SelectControlValueAccessorDirective } from './select-control-value-accessor.directive';\r\nimport { MultiSelectControlValueAccessorDirective } from './multi-select-control-value-accessor.directive';\r\n\r\n/** @ignore */\r\nexport const NGQP_BUILT_IN_ACCESSORS = [\r\n    DefaultControlValueAccessorDirective,\r\n    NumberControlValueAccessorDirective,\r\n    RangeControlValueAccessorDirective,\r\n    CheckboxControlValueAccessorDirective,\r\n    SelectControlValueAccessorDirective,\r\n    MultiSelectControlValueAccessorDirective,\r\n];","import { ControlValueAccessor } from '@angular/forms';\r\nimport { DefaultControlValueAccessorDirective } from './default-control-value-accessor.directive';\r\nimport { NGQP_BUILT_IN_ACCESSORS } from './ngqp-accessors';\r\n\r\n/**\r\n * This resembles the selectControlValueAccessor function from\r\n *   https://github.com/angular/angular/blob/7.1.2/packages/forms/src/directives/shared.ts#L186\r\n * We can't use it directly since it isn't exported in the public API, but let's hope choosing\r\n * any accessor is good enough for our purposes.\r\n *\r\n * @internal\r\n */\r\nexport function selectValueAccessor(valueAccessors: ControlValueAccessor[]): ControlValueAccessor {\r\n    if (!valueAccessors || !Array.isArray(valueAccessors)) {\r\n        throw new Error(`No matching ControlValueAccessor has been found for this form control`);\r\n    }\r\n\r\n    let defaultAccessor: ControlValueAccessor | null = null;\r\n    let builtInAccessor: ControlValueAccessor | null = null;\r\n    let customAccessor: ControlValueAccessor | null = null;\r\n\r\n    valueAccessors.forEach(valueAccessor => {\r\n        if (valueAccessor.constructor === DefaultControlValueAccessorDirective) {\r\n            defaultAccessor = valueAccessor;\r\n        } else if (NGQP_BUILT_IN_ACCESSORS.some(current => valueAccessor.constructor === current)) {\r\n            if (builtInAccessor !== null) {\r\n                throw new Error(`More than one built-in ControlValueAccessor matches`);\r\n            }\r\n\r\n            builtInAccessor = valueAccessor;\r\n        } else {\r\n            if (customAccessor !== null) {\r\n                throw new Error(`More than one custom ControlValueAccessor has been found on the form control`);\r\n            }\r\n\r\n            customAccessor = valueAccessor;\r\n        }\r\n    });\r\n\r\n    if (customAccessor !== null) {\r\n        return customAccessor;\r\n    }\r\n\r\n    if (builtInAccessor !== null) {\r\n        return builtInAccessor;\r\n    }\r\n\r\n    if (defaultAccessor !== null) {\r\n        return defaultAccessor;\r\n    }\r\n\r\n    throw new Error(`No matching ControlValueAccessor has been found for this form control`);\r\n}","import { Directive, Inject, Input, OnChanges, OnDestroy, Optional, Self, SimpleChanges } from '@angular/core';\r\nimport { QueryParamGroupService } from './query-param-group.service';\r\nimport { QueryParamAccessor } from './query-param-accessor.interface';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { selectValueAccessor } from '../accessors/util';\r\nimport { QueryParam } from '../model/query-param';\r\nimport { QueryParamGroup } from '../model/query-param-group';\r\n\r\n/**\r\n * Binds a {@link QueryParam} to a component directly.\r\n *\r\n * This directive accepts a {@link QueryParam} without requiring an outer {@link QueryParamGroup}.\r\n * It binds this parameter to the host component, which is required to have a [ControlValueAccessor]\r\n * {@link https://angular.io/api/forms/ControlValueAccessor}.\r\n */\r\n@Directive({\r\n    selector: '[queryParam]',\r\n    providers: [QueryParamGroupService],\r\n})\r\nexport class QueryParamDirective implements QueryParamAccessor, OnChanges, OnDestroy  {\r\n\r\n    /**\r\n     * The {@link QueryParam} to bind to the host component.\r\n     */\r\n    @Input('queryParam')\r\n    public queryParam: QueryParam<unknown> | null = null;\r\n\r\n    /** @internal */\r\n    public readonly name = 'param';\r\n\r\n    /** @internal */\r\n    public valueAccessor: ControlValueAccessor;\r\n\r\n    /** @internal */\r\n    private group = new QueryParamGroup({});\r\n\r\n    /** @internal */\r\n    constructor(\r\n        @Optional() private groupService: QueryParamGroupService,\r\n        @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\r\n    ) {\r\n        this.valueAccessor = selectValueAccessor(valueAccessors);\r\n        this.groupService.setQueryParamGroup(this.group);\r\n    }\r\n\r\n    /** @ignore */\r\n    public ngOnChanges(changes: SimpleChanges): void {\r\n        const paramChange = changes['queryParam'];\r\n\r\n        if (paramChange) {\r\n            if (this.group.get(this.name)) {\r\n                this.groupService.deregisterQueryParamDirective(this.name);\r\n                this.group.remove(this.name);\r\n            }\r\n\r\n            if (paramChange.currentValue) {\r\n                this.group.add(this.name, paramChange.currentValue);\r\n                this.groupService.registerQueryParamDirective(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @ignore */\r\n    public ngOnDestroy(): void {\r\n        if (this.groupService) {\r\n            this.groupService.deregisterQueryParamDirective(this.name);\r\n        }\r\n    }\r\n\r\n}","import { Directive, Inject, Input, OnChanges, OnDestroy, Optional, Self, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { QueryParamGroupService } from './query-param-group.service';\r\nimport { QueryParamAccessor } from './query-param-accessor.interface';\r\nimport { selectValueAccessor } from '../accessors/util';\r\n\r\n/**\r\n * Binds a {@link QueryParam} to a DOM element.\r\n *\r\n * This directive accepts the name of a {@link QueryParam} inside its parent {@link QueryParamGroup}.\r\n * It binds this parameter to the host element, which is required to have a [ControlValueAccessor]\r\n * {@link https://angular.io/api/forms/ControlValueAccessor}.\r\n */\r\n@Directive({\r\n    selector: '[queryParamName]',\r\n})\r\nexport class QueryParamNameDirective implements QueryParamAccessor, OnChanges, OnDestroy {\r\n\r\n    /**\r\n     * The name of the {@link QueryParam} inside its parent {@link QueryParamGroup}.\r\n     * Note that this does not refer to the [parameter name]{@link QueryParam#urlParam}.\r\n     */\r\n    @Input('queryParamName')\r\n    public set name(name: string) {\r\n        this._name = name;\r\n    }\r\n\r\n    public get name(): string {\r\n        if (!this._name) {\r\n            throw new Error(`No queryParamName has been specified.`);\r\n        }\r\n\r\n        return this._name;\r\n    }\r\n\r\n    /** @internal */\r\n    public valueAccessor: ControlValueAccessor;\r\n\r\n    private _name: string | null = null;\r\n\r\n    /** @internal */\r\n    constructor(\r\n        @Optional() private groupService: QueryParamGroupService,\r\n        @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\r\n    ) {\r\n        if (!this.groupService) {\r\n            throw new Error(`No parent configuration found. Did you forget to add [queryParamGroup]?`);\r\n        }\r\n\r\n        this.valueAccessor = selectValueAccessor(valueAccessors);\r\n    }\r\n\r\n    /** @ignore */\r\n    public ngOnChanges(changes: SimpleChanges) {\r\n        const nameChange = changes['name'];\r\n        if (nameChange) {\r\n            if (!nameChange.firstChange) {\r\n                this.groupService.deregisterQueryParamDirective(nameChange.previousValue);\r\n            }\r\n\r\n            if (nameChange.currentValue) {\r\n                this.groupService.registerQueryParamDirective(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @ignore */\r\n    public ngOnDestroy() {\r\n        if (this.groupService) {\r\n            this.groupService.deregisterQueryParamDirective(this.name);\r\n        }\r\n    }\r\n\r\n}\r\n","import { Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { QueryParamNameDirective } from './query-param-name.directive';\r\nimport { QueryParamGroup } from '../model/query-param-group';\r\nimport { QueryParamGroupService } from './query-param-group.service';\r\n\r\n/**\r\n * Binds a {@link QueryParamGroup} to a DOM element.\r\n *\r\n * This directive accepts an instance of {@link QueryParamGroup}. Any child using\r\n * {@link QueryParamNameDirective} will then be matched against this group, and the\r\n * synchronization process can take place.\r\n */\r\n@Directive({\r\n    selector: '[queryParamGroup]',\r\n    providers: [QueryParamGroupService],\r\n})\r\nexport class QueryParamGroupDirective implements OnChanges {\r\n\r\n    /**\r\n     * The {@link QueryParamGroup} to bind.\r\n     */\r\n    @Input('queryParamGroup')\r\n    public queryParamGroup: QueryParamGroup | null = null;\r\n\r\n    /** @internal */\r\n    constructor(private groupService: QueryParamGroupService) {\r\n    }\r\n\r\n    /** @ignore */\r\n    public ngOnChanges(changes: SimpleChanges) {\r\n        const groupChange = changes['queryParamGroup'];\r\n        if (groupChange) {\r\n            if (!groupChange.firstChange) {\r\n                throw new Error(`Binding a different QueryParamGroup during runtime is currently not supported.`);\r\n            }\r\n\r\n            const queryParamGroup = groupChange.currentValue;\r\n            if (!queryParamGroup) {\r\n                throw new Error(`You added the queryParamGroup directive, but haven't supplied a group to use.`);\r\n            }\r\n\r\n            this.groupService.setQueryParamGroup(queryParamGroup);\r\n        }\r\n    }\r\n\r\n}","import { Directive, EventEmitter, forwardRef, Output } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n/**\r\n * Provides an ad-hoc ControlValueAccessor to a component.\r\n *\r\n * This directive provides a ControlValueAccessor for the host on which it is applied\r\n * by proxying the required interface through events and an API.\r\n *\r\n *\r\n *     <app-item-selector #ctrl\r\n *              controlValueAccessor #accessor=\"controlValueAccessor\"\r\n *              (itemChange)=\"accessor.notifyChange($event)\"\r\n *              (controlValueChange)=\"ctrl.item = $event\">\r\n *     </app-item-selector>\r\n */\r\n@Directive({\r\n    selector: '[controlValueAccessor]',\r\n    exportAs: 'controlValueAccessor',\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => ControlValueAccessorDirective),\r\n            multi: true\r\n        }\r\n    ],\r\n})\r\nexport class ControlValueAccessorDirective<T> implements ControlValueAccessor {\r\n\r\n    /**\r\n     * Fired when a value should be written (model -> view).\r\n     *\r\n     * From the ControlValueAccessor perspective, this is the equivalent of\r\n     * writeValue. You should bind to this event and update your component's\r\n     * state with the given value.\r\n     */\r\n    @Output('controlValueChange')\r\n    public controlValueChange = new EventEmitter<T>();\r\n\r\n    /**\r\n     * Fired when the control's disabled change should change.\r\n     *\r\n     * From the ControlValueAccessor perspective, this is the equivalent of\r\n     * setDisabledState.\r\n     *\r\n     * This is currently not used by ngqp.\r\n     */\r\n    @Output('disabledChange')\r\n    public disabledChange = new EventEmitter<boolean>();\r\n\r\n    private fnChange = (_: T) => {};\r\n    private fnTouched = () => {};\r\n\r\n    /**\r\n     * Write a new value to the model (view -> model)\r\n     *\r\n     * When your component's value changes, call this method to inform\r\n     * the model about the change.\r\n     */\r\n    public notifyChange(value: T): void {\r\n        this.fnChange(value);\r\n    }\r\n\r\n    /**\r\n     * Inform that the component has been touched by the user.\r\n     *\r\n     * This is currently not used by ngqp.\r\n     */\r\n    public notifyTouched(): void {\r\n        this.fnTouched();\r\n    }\r\n\r\n    /** @internal */\r\n    public writeValue(value: T) {\r\n        this.controlValueChange.emit(value);\r\n    }\r\n\r\n    /** @internal */\r\n    public registerOnChange(fn: (value: T) => any) {\r\n        this.fnChange = fn;\r\n    }\r\n\r\n    /** @internal */\r\n    public registerOnTouched(fn: () => any) {\r\n        this.fnTouched = fn;\r\n    }\r\n\r\n    /** @internal */\r\n    public setDisabledState(isDisabled: boolean) {\r\n        this.disabledChange.emit(isDisabled);\r\n    }\r\n\r\n}","import { Directive, ElementRef, Host, Input, OnDestroy, OnInit, Optional, Renderer2 } from '@angular/core';\r\nimport { SelectControlValueAccessorDirective } from './select-control-value-accessor.directive';\r\n\r\n/** @ignore */\r\n@Directive({\r\n    selector: 'option',\r\n})\r\nexport class SelectOptionDirective<T> implements OnInit, OnDestroy {\r\n\r\n    private readonly id: string | null = null;\r\n\r\n    constructor(\r\n        @Optional() @Host() private parent: SelectControlValueAccessorDirective<T>,\r\n        private renderer: Renderer2,\r\n        private elementRef: ElementRef,\r\n    ) {\r\n        if (this.parent) {\r\n            this.id = this.parent.registerOption();\r\n        }\r\n    }\r\n\r\n    public ngOnInit() {\r\n        if (this.parent) {\r\n            this.renderer.setProperty(this.elementRef.nativeElement, 'value', this.id);\r\n        }\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n        if (this.parent) {\r\n            this.parent.deregisterOption(this.id!);\r\n            this.parent.writeValue(this.parent.value);\r\n        }\r\n    }\r\n\r\n    @Input('value')\r\n    public set value(value: T) {\r\n        if (this.parent) {\r\n            this.parent.updateOptionValue(this.id!, value);\r\n            this.parent.writeValue(this.parent.value);\r\n        }\r\n    }\r\n\r\n}","import { Directive, ElementRef, Host, Input, OnDestroy, OnInit, Optional, Renderer2 } from '@angular/core';\r\nimport { MultiSelectControlValueAccessorDirective } from './multi-select-control-value-accessor.directive';\r\n\r\n/** @ignore */\r\n@Directive({\r\n    selector: 'option',\r\n})\r\nexport class MultiSelectOptionDirective<T> implements OnInit, OnDestroy {\r\n\r\n    private readonly id: string | null = null;\r\n\r\n    constructor(\r\n        @Optional() @Host() private parent: MultiSelectControlValueAccessorDirective<T>,\r\n        private renderer: Renderer2,\r\n        private elementRef: ElementRef,\r\n    ) {\r\n        if (this.parent) {\r\n            this.id = this.parent.registerOption(this);\r\n        }\r\n    }\r\n\r\n    public ngOnInit() {\r\n        if (this.parent) {\r\n            this.renderer.setProperty(this.elementRef.nativeElement, 'value', this.id);\r\n        }\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n        if (this.parent) {\r\n            this.parent.deregisterOption(this.id!);\r\n        }\r\n    }\r\n\r\n    @Input('value')\r\n    public set value(value: T) {\r\n        if (this.parent) {\r\n            this.parent.updateOptionValue(this.id!, value);\r\n        }\r\n    }\r\n\r\n    public get selected(): boolean {\r\n        return (this.elementRef.nativeElement as HTMLOptionElement).selected;\r\n    }\r\n\r\n    public set selected(selected: boolean) {\r\n        if (this.parent) {\r\n            this.renderer.setProperty(this.elementRef.nativeElement, 'selected', selected);\r\n        }\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { RouterAdapter, RouterOptions } from './router-adapter.interface';\r\n\r\n/** @internal */\r\n@Injectable()\r\nexport class DefaultRouterAdapter implements RouterAdapter {\r\n\r\n    constructor(private router: Router, private route: ActivatedRoute) {\r\n    }\r\n\r\n    public get url() {\r\n        return this.router.url;\r\n    }\r\n\r\n    public get queryParamMap() {\r\n        return this.route.queryParamMap;\r\n    }\r\n\r\n    public navigate(queryParams: Params, extras: RouterOptions & { state?: any } = {}): Promise<boolean> {\r\n        return this.router.navigate([], {\r\n            relativeTo: this.route,\r\n            queryParamsHandling: 'merge',\r\n            queryParams: queryParams,\r\n            ...extras,\r\n        });\r\n    }\r\n\r\n    public getCurrentNavigation() {\r\n        return this.router.getCurrentNavigation();\r\n    }\r\n\r\n}","import { ModuleWithProviders, NgModule, Type } from '@angular/core';\r\nimport {\r\n    ControlValueAccessorDirective,\r\n    QueryParamDirective,\r\n    QueryParamNameDirective,\r\n    QueryParamGroupDirective\r\n} from './directives/directives';\r\nimport {\r\n    CheckboxControlValueAccessorDirective,\r\n    DefaultControlValueAccessorDirective,\r\n    MultiSelectControlValueAccessorDirective,\r\n    MultiSelectOptionDirective,\r\n    NumberControlValueAccessorDirective,\r\n    RangeControlValueAccessorDirective,\r\n    SelectControlValueAccessorDirective,\r\n    SelectOptionDirective\r\n} from './accessors/accessors';\r\nimport {\r\n    DefaultRouterAdapter,\r\n    DefaultRouterOptions,\r\n    NGQP_ROUTER_ADAPTER,\r\n    NGQP_ROUTER_OPTIONS,\r\n    RouterOptions\r\n} from './router-adapter/router-adapter';\r\n\r\n/** @ignore */\r\nconst DIRECTIVES: Type<any>[] = [\r\n    QueryParamDirective,\r\n    QueryParamNameDirective,\r\n    QueryParamGroupDirective,\r\n    ControlValueAccessorDirective,\r\n\r\n    // Accessors\r\n    DefaultControlValueAccessorDirective,\r\n    NumberControlValueAccessorDirective,\r\n    RangeControlValueAccessorDirective,\r\n    CheckboxControlValueAccessorDirective,\r\n    SelectControlValueAccessorDirective,\r\n    SelectOptionDirective,\r\n    MultiSelectControlValueAccessorDirective,\r\n    MultiSelectOptionDirective,\r\n];\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [ DIRECTIVES ],\r\n    exports: [ DIRECTIVES ],\r\n    providers: [\r\n        {\r\n            provide: NGQP_ROUTER_ADAPTER,\r\n            useClass: DefaultRouterAdapter\r\n        },\r\n        {\r\n            provide: NGQP_ROUTER_OPTIONS,\r\n            useValue: DefaultRouterOptions,\r\n        },\r\n    ],\r\n})\r\nexport class QueryParamModule {\r\n\r\n    public static withConfig(config: { routerOptions?: RouterOptions } = {}): ModuleWithProviders<QueryParamModule> {\r\n        return {\r\n            ngModule: QueryParamModule,\r\n            providers: [\r\n                {\r\n                    provide: NGQP_ROUTER_OPTIONS,\r\n                    useValue: {\r\n                        ...DefaultRouterOptions,\r\n                        ...config.routerOptions\r\n                    },\r\n                },\r\n            ],\r\n        };\r\n    }\r\n\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.QueryParamGroupService","i1.SelectControlValueAccessorDirective","i1.MultiSelectControlValueAccessorDirective"],"mappings":"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"}